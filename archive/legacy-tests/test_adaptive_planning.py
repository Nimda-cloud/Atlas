#!/usr/bin/env python3
"""
Test script for the adaptive hierarchical planning system.
This demonstrates how the system adapts task complexity based on goal analysis.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from agents.hierarchical_plan_manager import HierarchicalPlanManager, TaskLevel, TaskStatus

def test_adaptive_planning():
    """Test the adaptive hierarchical planning system."""
    print("üß™ Testing Adaptive Hierarchical Planning System")
    print("=" * 60)
    
    # Create a simple hierarchical plan manager without LLM dependencies
    plan_manager = HierarchicalPlanManager(
        llm_manager=None,
        strategic_planner=None,
        tactical_planner=None,
        operational_planner=None,
        status_callback=lambda msg: print(f"üì¢ {msg.get('content', '')}")
    )
    
    # Test with the user's specific goal
    user_goal = "–ó–∞–π–¥–∏ –≤ –º–æ—é –ø–æ—á—Ç—É —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä —Å–∞—Ñ–∞—Ä—ñ, –≤–æ–Ω–∞ –º–∞–ª–∞ –±–∏ –±—É—Ç–∏ —É–∂–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∞. –ù–∞–π–¥–∏ –≤—Å—ñ –ª–∏—Å—Ç–∏ —â–æ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –±–µ–∑–ø–µ–∫–∏ –≥—É–≥–ª –µ–∫–∞—É–Ω—Ç–∞ –Ω–∞ –æ–¥–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –¥–∂–º–∞–π–ª —ñ—ñ –≤–∏–≤–µ–¥–∏ –º–µ–Ω—ñ –≤ —á–∞—Ç—ñ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –∑ –∫–æ—Ä–æ—Ç–∫–∏–º –æ–ø–∏—Å–æ–º –≤—Å—ñ –ª–∏—Å—Ç–∏, —â–æ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –¥–∞–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É."
    
    print(f"üéØ Testing Goal: {user_goal}")
    print("-" * 60)
    
    # Analyze complexity
    complexity = plan_manager._analyze_goal_complexity(user_goal)
    print("üìä Complexity Analysis:")
    print(f"   ‚Ä¢ Level: {complexity['level']}")
    print(f"   ‚Ä¢ Phases: {complexity['phases']}")
    print(f"   ‚Ä¢ Tasks per phase: {complexity['tasks_per_phase']}")
    print(f"   ‚Ä¢ Actions per task: {complexity['actions_per_task']}")
    print(f"   ‚Ä¢ Simple keywords: {complexity['simple_keywords']}")
    print(f"   ‚Ä¢ Medium keywords: {complexity['medium_keywords']}")
    print(f"   ‚Ä¢ Complex keywords: {complexity['complex_keywords']}")
    print()
    
    # Create plan
    plan = plan_manager.create_hierarchical_plan(user_goal)
    
    if plan:
        print("‚úÖ Plan created successfully!")
        print("üìä Plan Statistics:")
        print(f"   ‚Ä¢ Total tasks: {plan['total_tasks']}")
        print(f"   ‚Ä¢ Strategic phases: {plan['strategic_tasks']}")
        print(f"   ‚Ä¢ Tactical tasks: {plan['tactical_tasks']}")
        print(f"   ‚Ä¢ Operational actions: {plan['operational_tasks']}")
        print()
        
        # Show task hierarchy
        print("üå≥ Task Hierarchy:")
        root_task = plan_manager.get_task(plan['root_task_id'])
        if root_task:
            _print_task_hierarchy(root_task, plan_manager, 0)
    else:
        print("‚ùå Failed to create plan")

def _print_task_hierarchy(task, plan_manager, level):
    """Print the task hierarchy recursively."""
    indent = "  " * level
    status_emoji = {
        TaskStatus.PENDING: "‚è≥",
        TaskStatus.RUNNING: "‚ñ∂Ô∏è",
        TaskStatus.COMPLETED: "‚úÖ",
        TaskStatus.FAILED: "‚ùå"
    }
    
    level_emoji = {
        TaskLevel.STRATEGIC: "üéØ",
        TaskLevel.TACTICAL: "üìù",
        TaskLevel.OPERATIONAL: "‚öôÔ∏è"
    }
    
    emoji = status_emoji.get(task.status, "‚è≥")
    level_icon = level_emoji.get(task.level, "üìã")
    
    print(f"{indent}{emoji} {level_icon} {task.title} ({task.status.value})")
    
    # Print children
    for child_id in task.children:
        child_task = plan_manager.get_task(child_id)
        if child_task:
            _print_task_hierarchy(child_task, plan_manager, level + 1)

def test_complexity_levels():
    """Test different complexity levels."""
    print("\nüß™ Testing Different Complexity Levels")
    print("=" * 60)
    
    plan_manager = HierarchicalPlanManager(
        llm_manager=None,
        strategic_planner=None,
        tactical_planner=None,
        operational_planner=None,
        status_callback=lambda msg: None
    )
    
    test_goals = [
        ("Simple goal", "Take a screenshot"),
        ("Medium goal", "Search for files and organize them by date"),
        ("Complex goal", "Create a comprehensive automation system that monitors system performance and generates detailed reports")
    ]
    
    for goal_name, goal_text in test_goals:
        print(f"\nüéØ {goal_name}: {goal_text}")
        complexity = plan_manager._analyze_goal_complexity(goal_text)
        print(f"   ‚Ä¢ Complexity: {complexity['level']}")
        print(f"   ‚Ä¢ Expected tasks: {complexity['phases']} √ó {complexity['tasks_per_phase']} √ó {complexity['actions_per_task']} = {complexity['phases'] * complexity['tasks_per_phase'] * complexity['actions_per_task']}")

if __name__ == "__main__":
    test_adaptive_planning()
    test_complexity_levels() 