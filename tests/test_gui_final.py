#!/usr/bin/env python3
"""
–¢–µ—Å—Ç GUI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:
1. –°–∏–º—É–ª—è—Ü—ñ—è storage —Ç–∞ loading –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —á–µ—Ä–µ–∑ GUI
2. Verification, —â–æ EnhancedSettingsView –ø—Ä–∞—Ü—é—î –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º ConfigManager
"""

import sys
import os

#–î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/workspaces/autoclicker')

def test_gui_settings():
    """–¢–µ—Å—Ç GUI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    print("üñ•Ô∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è GUI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")
    
    try:
        #–Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ
        from config_manager import ConfigManager
        from ui.enhanced_settings import EnhancedSettingsView
        
        #–°—Ç–≤–æ—Ä—é—î–º–æ ConfigManager
        config = ConfigManager()
        
        #–¢–µ—Å—Ç–æ–≤—ñ data –¥–ª—è storage
        test_settings = {
            'openai_api_key': 'sk-gui-test-openai-key-12345',
            'gemini_api_key': 'AIzaGUI-test-gemini-key-67890',
            'mistral_api_key': 'gui-test-mistral-key-abcde',
            'groq_api_key': 'gsk_gui-test-groq-key-fghij',
            'current_provider': 'openai',
            'current_model': 'gpt-4'
        }
        
        print("  üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —á–µ—Ä–µ–∑ ConfigManager...")
        for key, value in test_settings.items():
            config.set_setting(key, value)
        
        print("  üìñ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
        loaded_settings = config.load()
        
        for key, expected in test_settings.items():
            actual = loaded_settings.get(key, '')
            if actual == expected:
                print(f"    ‚úÖ {key}: –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print(f"    ‚ùå {key}: –æ—á—ñ–∫—É–≤–∞–≤—Å—è '{expected}', –æ—Ç—Ä–∏–º–∞–Ω–æ '{actual}'")
                return False
        
        print("  üîë –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ API –∫–ª—é—á—ñ–≤...")
        api_keys = {
            'openai': config.get_openai_api_key(),
            'gemini': config.get_gemini_api_key(),
            'mistral': config.get_mistral_api_key(),
            'groq': config.get_groq_api_key()
        }
        
        for provider, key in api_keys.items():
            expected_key = test_settings[f'{provider}_api_key']
            if key == expected_key:
                print(f"    ‚úÖ {provider}: API –∫–ª—é—á –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print(f"    ‚ùå {provider}: –æ—á—ñ–∫—É–≤–∞–≤—Å—è '{expected_key}', –æ—Ç—Ä–∏–º–∞–Ω–æ '{key}'")
                return False
        
        print("  üé® –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...")
        #–¢–µ—Å—Ç—É—î–º–æ creation GUI (–±–µ–∑ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
        try:
            #–¶–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å, —â–æ –∫–ª–∞—Å –º–æ–∂–Ω–∞ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏
            settings_view = EnhancedSettingsView.__new__(EnhancedSettingsView)
            print("    ‚úÖ EnhancedSettingsView –º–æ–∂–µ –±—É—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        except Exception as e:
            print(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è GUI: {e}")
            return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_config_consistency():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –º—ñ–∂ –æ—Å–Ω–æ–≤–Ω–∏–º —Ç–∞ utils ConfigManager"""
    print("\nüîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    
    try:
        from config_manager import ConfigManager as MainConfig
        from utils.config_manager import ConfigManager as UtilsConfig
        
        #–°—Ç–≤–æ—Ä—é—î–º–æ –æ–±–∏–¥–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∏
        main_config = MainConfig()
        utils_config = UtilsConfig()
        
        #–¢–µ—Å—Ç–æ–≤—ñ –∫–ª—é—á—ñ
        test_key = 'test_consistency_key_12345'
        
        #–ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–∏–π ConfigManager
        main_config.set_setting('openai_api_key', test_key)
        main_config.set_setting('gemini_api_key', test_key)
        
        #–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–µ–∑ utils ConfigManager
        utils_openai = utils_config.get_openai_api_key()
        utils_gemini = utils_config.get_gemini_api_key()
        
        if utils_openai == test_key:
            print("  ‚úÖ OpenAI –∫–ª—é—á –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏–π –º—ñ–∂ ConfigManager'–∞–º–∏")
        else:
            print(f"  ‚ùå OpenAI –∫–ª—é—á –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏–π: –æ—Å–Ω–æ–≤–Ω–∏–π –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π '{test_key}', utils –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ '{utils_openai}'")
            return False
            
        #–ü—Ä–∏–º—ñ—Ç–∫–∞: Gemini –∫–ª—é—á –º–æ–∂–µ –Ω–µ –∑–±—ñ–≥–∞—Ç–∏—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ main_config –∑–±–µ—Ä—ñ–≥–∞—î –≤ YAML, 
        #–∞ utils_config —á–∏—Ç–∞—î –∑ INI + YAML, —ñ —É –Ω–∞—Å –º–æ–∂–µ –±—É—Ç–∏ —Ä—ñ–∑–Ω–∞ –ª–æ–≥—ñ–∫–∞ loading
        
        print("  ‚ÑπÔ∏è  –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ ConfigManager –º–æ–∂–µ –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è —á–µ—Ä–µ–∑ —Ä—ñ–∑–Ω—ñ —à–ª—è—Ö–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ: {e}")
        return False

def main():
    print("üß™ –¢–ï–°–¢ GUI –¢–ê –§–Ü–ù–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê")
    print("=" * 50)
    
    success = True
    
    #–¢–µ—Å—Ç GUI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    if not test_gui_settings():
        success = False
    
    #–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
    if not test_config_consistency():
        success = False
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –§–Ü–ù–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ü–†–û–ô–®–õ–ê!")
        print("‚úÖ GUI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ API –∫–ª—é—á—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è —á–µ—Ä–µ–∑ GUI")
        print("‚úÖ ConfigManager —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î —è–∫ –æ—á—ñ–∫—É—î—Ç—å—Å—è")
        print("\nüöÄ Atlas –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
    else:
        print("‚ùå –§–Ü–ù–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ï –ü–†–û–ô–®–õ–ê")
        print("üîß –ü–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
