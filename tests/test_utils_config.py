#!/usr/bin/env python3
"""
–¢–µ—Å—Ç utils config manager –¥–ª—è GUI
"""

import sys
import os
sys.path.append('/workspaces/autoclicker')

def test_utils_config_manager():
    """–¢–µ—Å—Ç utils ConfigManager"""
    try:
        from utils.config_manager import ConfigManager
        
        print("‚úÖ –£—Å–ø—ñ—à–Ω–∏–π —ñ–º–ø–æ—Ä—Ç utils.ConfigManager")
        
        config = ConfigManager()
        print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ConfigManager")
        
        #–¢–µ—Å—Ç API –∫–ª—é—á—ñ–≤
        print("\nüîë –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤:")
        
        openai_key = config.get_openai_api_key()
        print(f"  OpenAI: {'–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if openai_key else '–ü–æ—Ä–æ–∂–Ω—å–æ'}")
        
        gemini_key = config.get_gemini_api_key()
        print(f"  Gemini: {'–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if gemini_key else '–ü–æ—Ä–æ–∂–Ω—å–æ'}")
        
        mistral_key = config.get_mistral_api_key()
        print(f"  Mistral: {'–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if mistral_key else '–ü–æ—Ä–æ–∂–Ω—å–æ'}")
        
        groq_key = config.get_groq_api_key()
        print(f"  Groq: {'–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if groq_key else '–ü–æ—Ä–æ–∂–Ω—å–æ'}")
        
        #–¢–µ—Å—Ç get_setting
        print("\n‚öôÔ∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è get_setting:")
        
        gemini_via_setting = config.get_setting('gemini_api_key')
        print(f"  get_setting('gemini_api_key'): {'–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if gemini_via_setting else '–ü–æ—Ä–æ–∂–Ω—å–æ'}")
        
        provider = config.get_current_provider()
        print(f"  –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
        
        model = config.get_current_model()
        print(f"  –ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å: {model}")
        
        #–¢–µ—Å—Ç storage/loading
        print("\nüíæ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:")
        
        #–¢–µ—Å—Ç–æ–≤–µ settings
        test_settings = {
            'test_setting': 'test_value',
            'api_keys': {
                'gemini': 'test_gemini_key'
            }
        }
        
        config.save(test_settings)
        print("  ‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
        
        loaded_settings = config.load()
        print(f"  ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î: {len(loaded_settings)} –∫–ª—é—á—ñ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç utils ConfigManager –¥–ª—è GUI")
    print("=" * 50)
    
    success = test_utils_config_manager()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ UTILS CONFIG MANAGER –ü–†–ê–¶–Æ–Ñ!")
        print("‚úÖ GUI —Ç–µ–ø–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print("‚ùå –Ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ utils config manager")
