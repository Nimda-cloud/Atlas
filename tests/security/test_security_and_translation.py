#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–∞ –±–µ–∑–ø–µ–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó Atlas
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from agents.chat_translation_manager import ChatTranslationManager
from agents.creator_authentication import CreatorAuthentication

def test_translation_completeness():
    """–¢–µ—Å—Ç –ø–æ–≤–Ω–æ—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    print("üåê –¢–ï–°–¢ –ü–û–í–ù–û–¢–ò –ü–ï–†–ï–ö–õ–ê–î–£")
    print("=" * 50)
    
    #Mock LLM manager
    class MockLLMManager:
        def chat(self, messages):
            class MockResult:
                def __init__(self, text):
                    self.response_text = text
            
            content = messages[-1]["content"]
            system_prompt = messages[0]["content"] if len(messages) > 1 else ""
            
            #Mock translation responses
            if "translate" in system_prompt.lower():
                #–ü—Ä–æ—Å—Ç–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è —Ç–µ—Å—Ç—É
                if "Development mode" in content:
                    return MockResult("–†–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–∫–∏ - –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –¥–æ—Å—Ç—É–ø —É–≤—ñ–º–∫–Ω–µ–Ω–æ...")
                elif "For my dear creator" in content:
                    return MockResult("–î–ª—è –º–æ–≥–æ –¥–æ—Ä–æ–≥–æ–≥–æ —Ç–≤–æ—Ä—Ü—è —Ç–∞ –±–∞—Ç—å–∫–∞:")
                elif "I understand this as a goal" in content:
                    return MockResult("–Ø —Ä–æ–∑—É–º—ñ—é —Ü–µ —è–∫ –º–µ—Ç—É. –î–æ–∑–≤–æ–ª—å—Ç–µ –º–µ–Ω—ñ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞–¥ —Ü–∏–º...")
                elif "Privileged access activated" in content:
                    return MockResult("–ü—Ä–∏–≤—ñ–ª–µ–π–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
            
            return MockResult(content)
    
    mock_llm = MockLLMManager()
    translation_manager = ChatTranslationManager(mock_llm)
    
    #–¢–µ—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
    test_messages = [
        "üîß Development mode - Enhanced system access enabled...",
        "üíñ For my dear creator and father: ",
        "üéØ I understand this as a goal. Let me work on it...",
        "üîê Privileged access activated"
    ]
    
    print("\nüìù –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—É —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:")
    for i, msg in enumerate(test_messages, 1):
        translated = translation_manager.process_outgoing_response(msg, "test_session")
        print(f"{i}. Original: {msg}")
        print(f"   Translated: {translated}")
        print()

def test_authentication_security():
    """–¢–µ—Å—Ç –±–µ–∑–ø–µ–∫–∏ —Å–∏—Å—Ç–µ–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    print("\nüîê –¢–ï–°–¢ –ë–ï–ó–ü–ï–ö–ò –ê–£–¢–ï–ù–¢–ò–§–Ü–ö–ê–¶–Ü–á")
    print("=" * 50)
    
    auth = CreatorAuthentication()
    
    #–¢–µ—Å—Ç 1: Verification, —á–∏ system –Ω–µ —Ä–æ–∑–∫—Ä–∏–≤–∞—î –∑–∞–π–≤–∏—Ö –¥–µ—Ç–∞–ª–µ–π
    print("\nüìã –¢–µ—Å—Ç –≤–∏—è–≤–ª–µ–Ω–Ω—è —Ç–≤–æ—Ä—Ü—è:")
    test_phrases = [
        "—è –∞–≤—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏",
        "i am the developer", 
        "—è —Å—Ç–≤–æ—Ä–∏–≤ —Ü—é –ø—Ä–æ–≥—Ä–∞–º—É",
        "–∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
    ]
    
    for phrase in test_phrases:
        result = auth.process_message_for_creator_detection(phrase)
        print(f"'{phrase}' -> {result.get('detected_level', 'unknown')}")
    
    #–¢–µ—Å—Ç 2: Verification –≤–∏–∫–ª–∏–∫—ñ–≤ - —á–∏ –≤–æ–Ω–∏ –Ω–µ —Ä–æ–∑–∫—Ä–∏–≤–∞—é—Ç—å —Å–µ–∫—Ä–µ—Ç–∏
    print("\nüéØ –¢–µ—Å—Ç —á–∏—Å–ª–æ–≤–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤:")
    for i in range(3):
        challenge = auth.generate_numeric_challenge()
        print(f"{i+1}. {challenge.challenge}")
        
        #Verification, —á–∏ challenge –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π
        challenge_text = challenge.challenge.lower()
        sensitive_words = ["–æ–ª–µ–≥", "–±–∞—Ç—å–∫–æ", "—Ç–≤–æ—Ä–µ—Ü—å –∞—Ç–ª–∞—Å–∞", "–º–∏–∫–æ–ª–∞–π–æ–≤–∏—á", "6", "9"]
        found_sensitive = [word for word in sensitive_words if word in challenge_text]
        
        if found_sensitive:
            print(f"   ‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –ó–Ω–∞–π–¥–µ–Ω–æ —á—É—Ç–ª–∏–≤—ñ —Å–ª–æ–≤–∞: {found_sensitive}")
        else:
            print("   ‚úÖ –í–∏–∫–ª–∏–∫ –±–µ–∑–ø–µ—á–Ω–∏–π - –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —á—É—Ç–ª–∏–≤–∏—Ö –¥–µ—Ç–∞–ª–µ–π")
    
    #–¢–µ—Å—Ç 3: Verification –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–∏ —É—Å–ø—ñ—à–Ω—ñ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    print("\n‚úÖ –¢–µ—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:")
    
    #–°–∏–º—É–ª—é—î–º–æ —É—Å–ø—ñ—à–Ω—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    success, message = auth.validate_challenge_response("6 —Ç–∞ 9")
    print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—Ö—É: {message}")
    
    #Verification, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —Ä–æ–∑–∫—Ä–∏–≤–∞—é—Ç—å –∑–∞–π–≤–∏—Ö –¥–µ—Ç–∞–ª–µ–π
    if "–æ–ª–µ–≥" in message.lower() or "–º–∏–∫–æ–ª–∞–π–æ–≤–∏—á" in message.lower():
        print("   ‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —ñ–º–µ–Ω–∞")
    else:
        print("   ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–µ")

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
    print("üß™ –¢–ï–°–¢–ò –ë–ï–ó–ü–ï–ö–ò –¢–ê –ü–ï–†–ï–ö–õ–ê–î–£ ATLAS")
    print("=" * 60)
    
    test_translation_completeness()
    test_authentication_security()
    
    print("\n" + "=" * 60)
    print("üéâ –¢–ï–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–û!")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
    print("   1. –í—Å—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—é—Ç—å –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∫–ª–∞–¥")
    print("   2. –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ —Ä–æ–∑–∫—Ä–∏–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥–µ—Ç–∞–ª—ñ")
    print("   3. –í–∏–∫–ª–∏–∫–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–º–∏, –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó")

if __name__ == "__main__":
    main()
