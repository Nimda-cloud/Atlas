#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —è–∫–æ—Å—Ç—ñ —Ä–æ–±–æ—Ç–∏ –º–æ–¥—É–ª—è advanced thinking
–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–µ–∞–ª—å–Ω—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—É –º–∏—Å–ª–µ–Ω–Ω—è
"""

import sys
from pathlib import Path

from advanced_thinking import AdvancedAIThinkingTool, ThinkingStrategy

#–î–æ–¥–∞—î–º–æ —à–ª—è—Ö–∏
base_dir = Path("/Users/developer/Documents/Atlas")
sys.path.insert(0, str(base_dir))
sys.path.insert(0, str(base_dir / "plugins" / "helper_sync_tell"))

def test_thinking_quality():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –º–∏—Å–ª–µ–Ω–Ω—è"""
    print("üß† –¢–ï–°–¢ –Ø–ö–û–°–¢–Ü –ê–õ–ì–û–†–ò–¢–ú–£ –î–£–ú–ê–ù–ù–Ø")
    print("=" * 50)

    #Creation —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
    tool = AdvancedAIThinkingTool()

    #–¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤
    test_queries = [
        {
            "query": "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É –ø–∞–º'—è—Ç—ñ –≤ Atlas —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è",
            "expected_strategy": ThinkingStrategy.ARCHITECTURAL,
            "category": "–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑",
        },
        {
            "query": "–©–æ –Ω–µ —Ç–∞–∫ –∑ –º–æ–¥—É–ª–µ–º –¥—É–º–∞–Ω–Ω—è —á–∏ –∞–Ω–∞–ª—ñ–∑—É?",
            "expected_strategy": ThinkingStrategy.TROUBLESHOOTING,
            "category": "–£—Å—É–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º",
        },
        {
            "query": "–Ø–∫ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –º–∏—Å–ª–µ–Ω–Ω—è AI –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞?",
            "expected_strategy": ThinkingStrategy.CREATIVE,
            "category": "–¢–≤–æ—Ä—á–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è",
        },
        {
            "query": "–ü–æ—Ä—ñ–≤–Ω—è–π —Ä—ñ–∑–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –º–∏—Å–ª–µ–Ω–Ω—è –≤ AI —Å–∏—Å—Ç–µ–º–∞—Ö",
            "expected_strategy": ThinkingStrategy.COMPARATIVE,
            "category": "–ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑",
        },
    ]

    results = []

    for i, test in enumerate(test_queries, 1):
        print(f"\n{i}. –¢–µ—Å—Ç: {test['category']}")
        print(f"–ó–∞–ø–∏—Ç: {test['query']}")
        print("-" * 40)

        try:
            #–§–∞–∑–∞ 1: –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            context = tool.analyze_query_context(test["query"])
            print(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç: –¥–æ–º–µ–Ω={context.domain}, —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å={context.complexity_level}/5")

            #–§–∞–∑–∞ 2: –í–∏–±—ñ—Ä —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
            strategy = tool.select_thinking_strategy(test["query"], context)
            strategy_correct = strategy == test["expected_strategy"]
            print(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {strategy.value} {'‚úÖ' if strategy_correct else '‚ùå'}")

            #–§–∞–∑–∞ 3: Generation –ø–∏—Ç–∞–Ω—å
            questions = tool.generate_strategic_questions(test["query"], strategy, context)
            print(f"‚ùì –ü–∏—Ç–∞–Ω—å –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {len(questions)}")

            if questions:
                print("üìã –°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è:")
                for j, q in enumerate(questions[:3], 1):  #–ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
                    print(f"   {j}. {q}")
                if len(questions) > 3:
                    print(f"   ... —Ç–∞ —â–µ {len(questions) - 3} –ø–∏—Ç–∞–Ω—å")

            #–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ
            quality_score = 0

            #–û—Ü—ñ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
            if strategy_correct:
                quality_score += 25

            #–û—Ü—ñ–Ω–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–∏—Ç–∞–Ω—å
            if 3 <= len(questions) <= 7:
                quality_score += 25

            #–û—Ü—ñ–Ω–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            if context.complexity_level > 1:
                quality_score += 25

            #–û—Ü—ñ–Ω–∫–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ—Å—Ç—ñ –ø–∏—Ç–∞–Ω—å
            if questions and all(len(q) > 20 for q in questions):
                quality_score += 25

            print(f"üìà –û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ: {quality_score}%")

            results.append({
                "category": test["category"],
                "strategy_correct": strategy_correct,
                "questions_count": len(questions),
                "quality_score": quality_score,
                "context": context,
            })

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            results.append({
                "category": test["category"],
                "error": str(e),
                "quality_score": 0,
            })

    #–ü—ñ–¥—Å—É–º–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    print("\n" + "=" * 50)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ø–ö–û–°–¢–Ü")
    print("=" * 50)

    total_score = 0
    successful_tests = 0

    for result in results:
        if "error" not in result:
            successful_tests += 1
            total_score += result["quality_score"]
            strategy_status = "‚úÖ" if result["strategy_correct"] else "‚ùå"
            print(f"‚Ä¢ {result['category']}: {result['quality_score']}% {strategy_status}")
        else:
            print(f"‚Ä¢ {result['category']}: –ü–û–ú–ò–õ–ö–ê - {result['error']}")

    if successful_tests > 0:
        average_score = total_score / successful_tests
        print(f"\nüéØ –°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞: {average_score:.1f}%")

        if average_score >= 80:
            print("üéâ –í–Ü–î–ú–Ü–ù–ù–û! –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∞—Ü—é—î –Ω–∞ –≤–∏—Å–æ–∫–æ–º—É —Ä—ñ–≤–Ω—ñ")
        elif average_score >= 60:
            print("‚úÖ –î–û–ë–†–ï! –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∞—Ü—é—î –∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ")
        else:
            print("‚ö†Ô∏è  –ü–û–¢–†–ï–ë–£–Ñ –ü–û–ö–†–ê–©–ï–ù–ù–Ø")

        return average_score >= 60
    print("‚ùå –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")
    return False

def test_meta_cognition():
    """–¢–µ—Å—Ç –º–µ—Ç–∞-–∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω–∏—Ö –∑–¥—ñ–±–Ω–æ—Å—Ç–µ–π"""
    print("\nüß† –¢–ï–°–¢ –ú–ï–¢–ê-–ö–û–ì–ù–Ü–¢–ò–í–ù–ò–• –ó–î–Ü–ë–ù–û–°–¢–ï–ô")
    print("=" * 50)

    tool = AdvancedAIThinkingTool()

    #–¢–µ—Å—Ç —Å–∫–ª–∞–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
    complex_query = "–Ø–∫ —Å–∏—Å—Ç–µ–º–∞ –º–µ—Ç–∞-–∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –≤ Atlas –º–æ–∂–µ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª—é–≤–∞—Ç–∏—Å—è?"

    try:
        context = tool.analyze_query_context(complex_query)

        #–ú–µ—Ç–∞-–∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        analysis, confidence, uncertainties = tool.analyze_with_meta_cognition(
            complex_query, {}, context,
        )

        print(f"üìù –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ–Ω–∞–Ω–æ: {len(analysis)} —Å–∏–º–≤–æ–ª—ñ–≤")
        print(f"üéØ –†—ñ–≤–µ–Ω—å –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ: {confidence:.2f}")
        print(f"‚ùì –ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ—Å—Ç–µ–π –∑–Ω–∞–π–¥–µ–Ω–æ: {len(uncertainties)}")

        if uncertainties:
            print("üîç –ö–ª—é—á–æ–≤—ñ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ—Å—Ç—ñ:")
            for unc in uncertainties[:3]:
                print(f"   ‚Ä¢ {unc}")

        #–û—Ü—ñ–Ω–∫–∞ –º–µ—Ç–∞-–∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        meta_score = 0

        if 0.1 <= confidence <= 0.9:  #–†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
            meta_score += 30

        if uncertainties:  #–í–∏—è–≤–ª–µ–Ω–Ω—è –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ—Å—Ç–µ–π
            meta_score += 40

        if len(analysis) > 100:  #–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            meta_score += 30

        print(f"üìä –ú–µ—Ç–∞-–∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: {meta_score}%")

        return meta_score >= 70

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ç–∞-–∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É: {e}")
        return False

def performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    print("\n‚ö° –¢–ï–°–¢ –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü")
    print("=" * 50)

    import time

    tool = AdvancedAIThinkingTool()
    query = "–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–ª–≥–æ—Ä–∏—Ç–º—É"

    start_time = time.time()

    try:
        #–ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
        context = tool.analyze_query_context(query)
        strategy = tool.select_thinking_strategy(query, context)
        questions = tool.generate_strategic_questions(query, strategy, context)

        end_time = time.time()
        processing_time = end_time - start_time

        print(f"‚è±Ô∏è  –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {processing_time:.3f} —Å–µ–∫")
        print(f"üîß –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {strategy.value}")
        print(f"‚ùì –ü–∏—Ç–∞–Ω—å: {len(questions)}")

        #–û—Ü—ñ–Ω–∫–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        if processing_time < 1.0:
            print("üöÄ –®–í–ò–î–ö–û! –û–±—Ä–æ–±–∫–∞ –∑–∞ < 1 —Å–µ–∫")
            return True
        if processing_time < 3.0:
            print("‚úÖ –ù–û–†–ú–ê–õ–¨–ù–û! –û–±—Ä–æ–±–∫–∞ –∑–∞ < 3 —Å–µ–∫")
            return True
        print("‚ö†Ô∏è  –ü–û–í–Ü–õ–¨–ù–û! –û–±—Ä–æ–±–∫–∞ > 3 —Å–µ–∫")
        return False

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
        return False

if __name__ == "__main__":
    #–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
    quality_ok = test_thinking_quality()
    meta_ok = test_meta_cognition()
    perf_ok = performance_test()

    print("\n" + "=" * 50)
    print("üèÜ –ó–ê–ì–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 50)

    passed = sum([quality_ok, meta_ok, perf_ok])
    total = 3

    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç—ñ–≤: {passed}/{total}")

    if passed == total:
        print("üéâ –ú–û–î–£–õ–¨ –î–£–ú–ê–ù–ù–Ø –ü–†–ê–¶–Æ–Ñ –Ü–î–ï–ê–õ–¨–ù–û!")
    elif passed >= 2:
        print("üëç –ú–û–î–£–õ–¨ –î–£–ú–ê–ù–ù–Ø –ü–†–ê–¶–Æ–Ñ –î–û–ë–†–ï!")
    else:
        print("‚ö†Ô∏è  –ú–û–î–£–õ–¨ –î–£–ú–ê–ù–ù–Ø –ü–û–¢–†–ï–ë–£–Ñ –ü–û–ö–†–ê–©–ï–ù–ù–Ø!")

    print("\nüìã –î–µ—Ç–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞:")
    print(f"   ‚Ä¢ –Ø–∫—ñ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—É: {'‚úÖ' if quality_ok else '‚ùå'}")
    print(f"   ‚Ä¢ –ú–µ—Ç–∞-–∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω—ñ—Å—Ç—å: {'‚úÖ' if meta_ok else '‚ùå'}")
    print(f"   ‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {'‚úÖ' if perf_ok else '‚ùå'}")
