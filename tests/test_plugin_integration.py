#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó advanced_thinking –ø–ª–∞–≥—ñ–Ω–∞ –∑ —Ö–µ–ª–ø —á–∞—Ç–æ–º Atlas
"""

import sys
from pathlib import Path

#–î–æ–¥–∞—î–º–æ —à–ª—è—Ö–∏
base_dir = Path("/Users/developer/Documents/Atlas")
sys.path.insert(0, str(base_dir))
sys.path.insert(0, str(base_dir / "plugins" / "helper_sync_tell"))

def test_plugin_integration():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –ø–ª–∞–≥—ñ–Ω–∞ –∑ —Å–∏—Å—Ç–µ–º–æ—é"""
    print("üîó –¢–ï–°–¢ –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á ADVANCED THINKING –ü–õ–ê–ì–Ü–ù–ê")
    print("=" * 60)

    issues = []

    #1. Verification —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–ª–∞–≥—ñ–Ω–∞
    print("\n1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–ª–∞–≥—ñ–Ω–∞...")

    try:
        from advanced_thinking import AdvancedAIThinkingTool, register

        #–Ü–º—ñ—Ç–∞—Ü—ñ—è Atlas app
        class MockAtlasApp:
            def __init__(self):
                self.advanced_ai_thinking_integration = False
                self._original_handle_help_mode = None

            def _handle_help_mode(self, message, context):
                return f"Original handler: {message}"

        mock_app = MockAtlasApp()

        #–¢–µ—Å—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        result = register(atlas_app=mock_app)

        if result and "tools" in result and result["tools"]:
            print("‚úÖ –ü–ª–∞–≥—ñ–Ω —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

            #Verification —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
            if hasattr(mock_app, "advanced_ai_thinking_integration") and mock_app.advanced_ai_thinking_integration:
                print("‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ help mode —É—Å–ø—ñ—à–Ω–∞")
            else:
                issues.append("‚ö†Ô∏è  –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ help mode –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞")

        else:
            issues.append("‚ùå –ü–ª–∞–≥—ñ–Ω –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

    except Exception as e:
        issues.append(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–ª–∞–≥—ñ–Ω–∞: {e}")
        import traceback
        traceback.print_exc()

    #2. Verification —Ä–æ–±–æ—Ç–∏ help mode handler
    print("\n2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ help mode handler...")

    try:
        #Creation —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
        tool = AdvancedAIThinkingTool()

        #–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ mock app
        success = tool.integrate_with_atlas_help_mode(mock_app)

        if success:
            print("‚úÖ Help mode handler —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ")

            #–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            test_queries = [
                "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º–∏",
                "–Ø–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å Atlas?",
                "–©–æ –Ω–µ —Ç–∞–∫ –∑ –º–æ–¥—É–ª–µ–º –ø–∞–º'—è—Ç—ñ?",
                "read file main.py",  #–ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç - –º–∞—î –π—Ç–∏ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ handler
            ]

            print("\nüìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤:")
            for query in test_queries:
                try:
                    response = mock_app._handle_help_mode(query, None)
                    is_advanced = "–ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π" in query.lower() or "–ø–æ–∫—Ä–∞—â" in query.lower() or "—â–æ –Ω–µ —Ç–∞–∫" in query.lower()

                    if is_advanced and "Original handler" in response:
                        issues.append(f"‚ö†Ô∏è  –°–∫–ª–∞–¥–Ω–∏–π –∑–∞–ø–∏—Ç '{query}' –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –ø—Ä–æ—Å—Ç–∏–º handler")
                    elif not is_advanced and "Original handler" not in response:
                        print(f"‚úÖ –°–∫–ª–∞–¥–Ω–∏–π –∑–∞–ø–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è: {query}")
                    else:
                        print(f"‚úÖ –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–ª–µ–≥—É—î—Ç—å—Å—è: {query}")

                except Exception as e:
                    issues.append(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É '{query}': {e}")
        else:
            issues.append("‚ùå Help mode handler –Ω–µ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–≤—Å—è")

    except Exception as e:
        issues.append(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è help mode: {e}")

    #3. Verification —Å–∏—Å—Ç–µ–º–∏ –¥–µ—Ç–µ–∫—Ü—ñ—ó —Ä–µ–∂–∏–º—ñ–≤
    print("\n3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –¥–µ—Ç–µ–∫—Ü—ñ—ó —Ä–µ–∂–∏–º—ñ–≤...")

    try:
        #–¢–µ—Å—Ç –ø–æ—Ç–æ—á–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –¥–µ—Ç–µ–∫—Ü—ñ—ó
        current_keywords = [
            "–ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π", "analyze", "—è–∫ —Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à", "how do you use",
            "–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è", "improvement", "–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è", "enhance",
            "–ø—Ä–æ–±–ª–µ–º–∞—Ç–∏–∫–∞", "problems", "–º—ñ—Ä–∫—É–≤–∞–Ω–Ω—è", "reasoning",
            "–ø–∞–º'—è—Ç—å", "memory", "—è–∫ –ø—Ä–∞—Ü—é—î", "how does work",
            "–∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞", "architecture", "—Å–∏—Å—Ç–µ–º–∞", "system",
            "–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è", "optimization", "design", "structure",
        ]

        simple_keywords = ["read file", "list directory", "tree", "search for", "info about", "search functions"]

        print("üìä –ü–æ—Ç–æ—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü—ñ—ó:")
        print(f"   ‚Ä¢ –°–∫–ª–∞–¥–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: {len(current_keywords)}")
        print(f"   ‚Ä¢ –ü—Ä–æ—Å—Ç—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: {len(simple_keywords)}")

        #–¢–µ—Å—Ç –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
        conflicting_queries = [
            "search for architecture patterns",  #–º–æ–∂–µ –ø–ª—É—Ç–∞—Ç–∏
            "analyze file structure",  #–º–æ–∂–µ –ø–ª—É—Ç–∞—Ç–∏
            "how does memory manager work?",  #—Å–∫–ª–∞–¥–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        ]

        print("\n‚ö†Ô∏è  –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏:")
        for query in conflicting_queries:
            has_simple = any(kw in query.lower() for kw in simple_keywords)
            has_complex = any(kw in query.lower() for kw in current_keywords)

            if has_simple and has_complex:
                print(f"   ‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª—ñ–∫—Ç: '{query}'")
                issues.append(f"–ö–æ–Ω—Ñ–ª—ñ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç: '{query}'")
            else:
                print(f"   ‚úÖ –ß–∏—Å—Ç–∏–π: '{query}'")

    except Exception as e:
        issues.append(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–µ—Ç–µ–∫—Ü—ñ—ó: {e}")

    #–ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á")
    print("=" * 60)

    if not issues:
        print("üéâ –í–°–ï –ü–†–ê–¶–Æ–Ñ –Ü–î–ï–ê–õ–¨–ù–û!")
        print("‚úÖ –ü–ª–∞–≥—ñ–Ω –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π –∑ Atlas")
        return True
    print(f"‚ö†Ô∏è  –ó–ù–ê–ô–î–ï–ù–û {len(issues)} –ü–†–û–ë–õ–ï–ú:")
    for i, issue in enumerate(issues, 1):
        print(f"{i:2d}. {issue}")
    return False

def analyze_current_detection_system():
    """–ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –¥–µ—Ç–µ–∫—Ü—ñ—ó —Ä–µ–∂–∏–º—ñ–≤"""
    print("\nüîç –ê–ù–ê–õ–Ü–ó –ü–û–¢–û–ß–ù–û–á –°–ò–°–¢–ï–ú–ò –î–ï–¢–ï–ö–¶–Ü–á")
    print("=" * 60)

    #–ß–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é
    try:

        #–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –¥–µ—Ç–µ–∫—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É
        advanced_thinking_file = base_dir / "plugins" / "helper_sync_tell" / "advanced_thinking.py"
        content = advanced_thinking_file.read_text()

        #–í–∏—Ç—è–≥—É—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑ –∫–æ–¥—É
        import re

        print("üìã –ü–æ—Ç–æ—á–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è advanced thinking:")

        #–ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–µ–∫—Ü—ñ—é –∑ advanced_keywords
        adv_match = re.search(r"advanced_keywords\s*=\s*\[(.*?)\]", content, re.DOTALL)
        if adv_match:
            keywords_text = adv_match.group(1)
            keywords = re.findall(r"'([^']+)'|\"([^\"]+)\"", keywords_text)
            keywords = [k[0] or k[1] for k in keywords]

            for kw in keywords:
                print(f"   ‚Ä¢ {kw}")

        print("\nüìã –ü—Ä–æ—Å—Ç—ñ –∫–æ–º–∞–Ω–¥–∏ (–∑ main.py):")
        simple_commands = ["read file", "list directory", "tree", "search for", "info about", "search functions"]
        for cmd in simple_commands:
            print(f"   ‚Ä¢ {cmd}")

        #–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–±–ª–µ–º
        print("\n‚ö†Ô∏è  –í–ò–Ø–í–õ–ï–ù–Ü –ü–†–û–ë–õ–ï–ú–ò:")
        print("1. –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –ø–µ—Ä–µ—Ç–∏–Ω–∞—é—Ç—å—Å—è:")
        print("   ‚Ä¢ 'search' —î –≤ –æ–±–æ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö")
        print("   ‚Ä¢ 'architecture' –º–æ–∂–µ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É–≤–∞—Ç–∏ –∑ 'analyze'")
        print("   ‚Ä¢ 'memory' –º–æ–∂–µ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É–≤–∞—Ç–∏ –∑ 'info about'")

        print("\n2. –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü—ñ—ó:")
        print("   ‚Ä¢ –ë–∞–∑—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –Ω–∞ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö")
        print("   ‚Ä¢ –ù–µ –≤—Ä–∞—Ö–æ–≤—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–∞ –Ω–∞–º—ñ—Ä")
        print("   ‚Ä¢ –ù–µ –º–∞—î —Å–∏—Å—Ç–µ–º–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤")

        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
        return False

if __name__ == "__main__":
    success = test_plugin_integration()
    analyze_current_detection_system()

    if success:
        print("\n‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î, –∞–ª–µ –ø–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –¥–µ—Ç–µ–∫—Ü—ñ—ó")
    else:
        print("\n‚ö†Ô∏è  –ü–æ—Ç—Ä–µ–±—É—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó")
