#!/usr/bin/env python3
"""Test System Help mode integration with existing tools."""

import sys
sys.path.append('/workspaces/Atlas')

try:
    from agents.chat_context_manager import ChatContextManager, ChatMode
    
    #Initialize the context manager
    manager = ChatContextManager()
    
    print("üîß Testing System Help integration with existing tools...")
    
    #Test cases for different types of questions
    test_cases = [
        {
            'message': '–ú–µ–Ω–µ —Ü—ñ–∫–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º\'—è—Ç—ñ Atlas. –î–µ —ñ —è–∫ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ?',
            'expected_tools': ['code_reader_tool', 'professional_analyzer', 'semantic_search'],
            'description': 'Memory system investigation'
        },
        {
            'message': '–Ø–∫—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —î –≤ —Å–∏—Å—Ç–µ–º—ñ —Ç–∞ –¥–µ —ó—Ö –∫–æ–¥?',
            'expected_tools': ['code_reader_tool', 'file_search', 'semantic_search'],
            'description': 'Tools investigation'
        },
        {
            'message': '–ó–Ω–∞–π–¥–∏ –ø—Ä–æ–±–ª–µ–º–∏ –≤ –∫–æ–¥—ñ —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π —Ä—ñ—à–µ–Ω–Ω—è',
            'expected_tools': ['professional_analyzer', 'semantic_search', 'grep_search'],
            'description': 'Problem analysis request'
        },
        {
            'message': '–ü–µ—Ä–µ–≤—ñ—Ä —è–∫—ñ—Å—Ç—å –∫–æ–¥—É —ñ –∑–Ω–∞–π–¥–∏ –ø–æ–º–∏–ª–∫–∏',
            'expected_tools': ['professional_analyzer', 'semantic_search', 'file_search'],
            'description': 'Code quality analysis'
        }
    ]
    
    for i, test in enumerate(test_cases, 1):
        print(f"\n‚úÖ Test {i}: {test['description']}")
        print(f"   Input: '{test['message'][:60]}...'")
        
        #Analyze message
        context = manager.analyze_message(test['message'])
        mode_detected = context.mode.value
        confidence = context.confidence
        
        print(f"   üéØ Mode: {mode_detected} (confidence: {confidence:.2f})")
        
        #Generate response prompt
        prompt = manager.generate_response_prompt(context, test['message'])
        
        #Check if prompt mentions the expected tools
        mentioned_tools = []
        for tool in test['expected_tools']:
            if tool in prompt:
                mentioned_tools.append(tool)
        
        print(f"   üîß Expected tools: {', '.join(test['expected_tools'])}")
        print(f"   ‚úÖ Mentioned tools: {', '.join(mentioned_tools) if mentioned_tools else 'None'}")
        
        #Check if professional analysis mode is activated for problem analysis
        if 'problem' in test['message'].lower() or '–ø–æ–º–∏–ª–∫–∏' in test['message'].lower():
            has_professional_mode = 'PROFESSIONAL ANALYSIS MODE' in prompt or 'Professional Code Analyzer' in prompt
            print(f"   üéì Professional mode: {'‚úÖ Activated' if has_professional_mode else '‚ùå Not activated'}")
        
        #Show a snippet of the prompt
        snippet = prompt[:300].replace('\n', ' ').strip() + '...'
        print(f"   üìã Prompt preview: {snippet}")
    
    print("\nüéØ System Help Analysis Integration:")
    print("   ‚Ä¢ Uses existing code_reader_tool for structure analysis")
    print("   ‚Ä¢ Leverages professional_analyzer for issue detection")
    print("   ‚Ä¢ Employs semantic_search for intelligent code search")
    print("   ‚Ä¢ Activates professional mode for problem analysis")
    print("   ‚Ä¢ References specific tools by name in analysis workflow")
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
