#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É
"""

import os
import sys

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_translation_initialization():
    """–¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
    print("üß™ –¢–ï–°–¢ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á –°–ò–°–¢–ï–ú–ò –ü–ï–†–ï–ö–õ–ê–î–£")
    print("=" * 50)

    try:
        from agents.chat_translation_manager import ChatTranslationManager

        #–¢–µ—Å—Ç 1: Initialization –±–µ–∑ LLM manager
        print("\n1. –¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–µ–∑ LLM manager:")
        translation_manager = ChatTranslationManager()
        print("   ‚úÖ ChatTranslationManager —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

        #–¢–µ—Å—Ç 2: Verification —á–∏ system –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ LLM
        print("\n2. –¢–µ—Å—Ç –±–∞–∑–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –±–µ–∑ LLM:")

        #Verification –¥–µ—Ç–µ–∫—Ü—ñ—ó –º–æ–≤–∏
        ukrainian_text = "–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?"
        detected_lang, confidence = translation_manager.translation_tool.detect_language(ukrainian_text)
        print(f"   –î–µ—Ç–µ–∫—Ü—ñ—è –º–æ–≤–∏: '{ukrainian_text}' -> {detected_lang} (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence:.2f})")

        #Verification —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–µ—Ä–µ–∫–ª–∞–¥
        should_translate = translation_manager.translation_tool.should_translate_message(ukrainian_text)
        print(f"   –ß–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–µ—Ä–µ–∫–ª–∞–¥: {should_translate}")

        #–¢–µ—Å—Ç 3: Mock LLM manager
        print("\n3. –¢–µ—Å—Ç –∑ Mock LLM manager:")

        class MockLLMManager:
            def chat(self, messages):
                class MockResult:
                    def __init__(self, text):
                        self.response_text = text

                content = messages[-1]["content"]
                if "–ü—Ä–∏–≤—ñ—Ç" in content and "translate" in messages[0]["content"]:
                    return MockResult("Hello, how are you?")
                if "Hello" in content and "Ukrainian" in messages[0]["content"]:
                    return MockResult("–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?")
                return MockResult(content)

        #–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Mock LLM
        mock_llm = MockLLMManager()
        translation_manager.set_llm_manager(mock_llm)
        print("   ‚úÖ Mock LLM manager –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        #–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—É
        processed_msg, context = translation_manager.process_incoming_message(ukrainian_text)
        print(f"   –û–±—Ä–æ–±–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{processed_msg}'")
        print(f"   –ú–æ–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {context.user_language}")
        print(f"   –ü–æ—Ç—Ä—ñ–±–µ–Ω –ø–µ—Ä–µ–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {context.requires_response_translation}")

        #–¢–µ—Å—Ç –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        english_response = "Hello! I can help you with various tasks."
        if context.requires_response_translation:
            translated_response = translation_manager.process_outgoing_response(english_response)
            print(f"   –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: '{english_response}'")
            print(f"   –ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: '{translated_response}'")

        print("\n‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")

    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ: {e}")
        import traceback
        traceback.print_exc()

def test_language_detection_patterns():
    """–¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤ –¥–µ—Ç–µ–∫—Ü—ñ—ó –º–æ–≤–∏"""
    print("\nüåê –¢–ï–°–¢ –ü–ê–¢–¢–ï–†–ù–Ü–í –î–ï–¢–ï–ö–¶–Ü–á –ú–û–í–ò")
    print("=" * 50)

    try:
        from agents.chat_translation_manager import ChatTranslationManager

        translation_manager = ChatTranslationManager()

        test_phrases = [
            ("–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?", "uk", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"),
            ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", "ru", "–†–æ—Å—ñ–π—Å—å–∫–∞"),
            ("Hello, how are you?", "en", "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞"),
            ("–ó—Ä–æ–±–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –µ–∫—Ä–∞–Ω–∞", "uk", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –∫–æ–º–∞–Ω–¥–∞"),
            ("–°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞", "ru", "–†–æ—Å—ñ–π—Å—å–∫–∞ –∫–æ–º–∞–Ω–¥–∞"),
            ("Take a screenshot", "en", "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –∫–æ–º–∞–Ω–¥–∞"),
            ("–Ø–∫—ñ —É —Ç–µ–±–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏?", "uk", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏"),
            ("–ö–∞–∫–∏–µ —É —Ç–µ–±—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã?", "ru", "–†–æ—Å—ñ–π—Å—å–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏"),
            ("What tools do you have?", "en", "–ê–Ω–≥–ª—ñ–π—Å—å–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏"),
        ]

        print("\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–µ—Ç–µ–∫—Ü—ñ—ó:")
        for phrase, expected_lang, description in test_phrases:
            detected_lang, confidence = translation_manager.translation_tool.detect_language(phrase)
            should_translate = translation_manager.translation_tool.should_translate_message(phrase)

            status = "‚úÖ" if detected_lang == expected_lang else "‚ùå"
            print(f"{status} {description}")
            print(f"    '{phrase}'")
            print(f"    –î–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–æ: {detected_lang} (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å: {expected_lang})")
            print(f"    –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence:.2f}, –ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏: {should_translate}")
            print()

    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ –¥–µ—Ç–µ–∫—Ü—ñ—ó: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
    test_translation_initialization()
    test_language_detection_patterns()

    print("\n" + "=" * 60)
    print("üéâ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
    print("\nüí° –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–µ–ø–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è:")
    print("   1. ChatTranslationManager —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –±–µ–∑ LLM manager")
    print("   2. LLM manager –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ —á–µ—Ä–µ–∑ set_llm_manager()")
    print("   3. –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –¥–µ—Ç–µ–∫—Ü—ñ—î—é –º–æ–≤–∏ –Ω–∞–≤—ñ—Ç—å –±–µ–∑ LLM")
    print("   4. –ü–µ—Ä–µ–∫–ª–∞–¥ –ø—Ä–∞—Ü—é—î –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è LLM manager")

if __name__ == "__main__":
    main()
