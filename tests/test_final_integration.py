#!/usr/bin/env python3
"""
–§—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –¥–µ—Ç–µ–∫—Ü—ñ—ó —Ä–µ–∂–∏–º—ñ–≤
"""

import sys
from pathlib import Path

#–î–æ–¥–∞—î–º–æ —à–ª—è—Ö–∏
base_dir = Path("/Users/developer/Documents/Atlas")
sys.path.insert(0, str(base_dir))
sys.path.insert(0, str(base_dir / "plugins" / "helper_sync_tell"))

def test_final_integration():
    """–¢–µ—Å—Ç —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º"""
    print("üéØ –§–Ü–ù–ê–õ–¨–ù–ò–ô –¢–ï–°–¢ –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –ü–û–ö–†–ê–©–ï–ù–û–á –°–ò–°–¢–ï–ú–ò")
    print("=" * 60)

    results = {"passed": 0, "total": 0, "issues": []}

    #1. –¢–µ—Å—Ç —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    print("\n1. –¢–µ—Å—Ç —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")

    try:
        from intelligent_mode_detector import IntelligentModeDetector
        detector = IntelligentModeDetector()

        #–ö—Ä–∏—Ç–∏—á–Ω—ñ —Ç–µ—Å—Ç–∏
        critical_tests = [
            ("read file main.py", False, "Simple file read"),
            ("–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É Atlas", True, "Complex analysis"),
            ("–©–æ –Ω–µ —Ç–∞–∫ –∑ –º–æ–¥—É–ª–µ–º –ø–∞–º'—è—Ç—ñ?", True, "Problem identification"),
            ("search for MemoryManager", False, "Simple search"),
            ("–Ø–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å?", True, "Improvement request"),
        ]

        for message, should_be_advanced, description in critical_tests:
            result = detector.detect_chat_mode(message)

            if result.should_use_advanced == should_be_advanced:
                print(f"‚úÖ {description}: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–æ")
                results["passed"] += 1
            else:
                print(f"‚ùå {description}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–æ")
                results["issues"].append(f"–î–µ—Ç–µ–∫—Ç–æ—Ä: {description}")

            results["total"] += 1

    except Exception as e:
        results["issues"].append(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")

    #2. –¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ advanced_thinking
    print("\n2. –¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ advanced_thinking...")

    try:
        from advanced_thinking import AdvancedAIThinkingTool

        #Mock Atlas app –∑ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–º –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º
        class MockAdvancedAtlasApp:
            def __init__(self):
                self.advanced_ai_thinking_integration = False
                self._original_handle_help_mode = None

                #Mock code_reader
                class MockCodeReader:
                    def semantic_search(self, query):
                        return f"Semantic search results for: {query}"

                    def search_in_files(self, query):
                        return f"File search results for: {query}"

                    def read_file(self, file_path):
                        return f"Content of file: {file_path}"

                self.code_reader = MockCodeReader()

            def _handle_help_mode(self, message, context):
                return f"Original simple handler: {message}"

        mock_app = MockAdvancedAtlasApp()
        tool = AdvancedAIThinkingTool()

        #–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
        integration_success = tool.integrate_with_atlas_help_mode(mock_app)

        if integration_success:
            print("‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞")
            results["passed"] += 1
        else:
            print("‚ùå –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è")
            results["issues"].append("–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è")

        results["total"] += 1

        #–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤
        test_messages = [
            ("read file config.py", "Original simple handler", "Simple command routing"),
            ("–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Å–∏—Å—Ç–µ–º—É –ø–∞–º'—è—Ç—ñ", "–§–∞–∑–∞ 1: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑", "Advanced thinking routing"),
            ("list directory agents", "Original simple handler", "Directory listing"),
            ("–©–æ –Ω–µ —Ç–∞–∫ –∑ –º–æ–¥—É–ª–µ–º?", "–§–∞–∑–∞ 1: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑", "Problem analysis"),
        ]

        for message, expected_keyword, description in test_messages:
            try:
                response = mock_app._handle_help_mode(message, None)

                if expected_keyword in response:
                    print(f"‚úÖ {description}: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
                    results["passed"] += 1
                else:
                    print(f"‚ùå {description}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
                    results["issues"].append(f"–û–±—Ä–æ–±–∫–∞: {description}")

                results["total"] += 1

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ '{message}': {e}")
                results["issues"].append(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ '{message}': {e}")
                results["total"] += 1

    except Exception as e:
        results["issues"].append(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó: {e}")
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó: {e}")

    #3. –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    print("\n3. –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–µ—Ç–µ–∫—Ü—ñ—ó...")

    try:
        import time

        from intelligent_mode_detector import IntelligentModeDetector

        detector = IntelligentModeDetector()
        test_messages = [
            "read file main.py",
            "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º–∏ Atlas —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è",
            "search for memory manager functions",
            "–©–æ –Ω–µ —Ç–∞–∫ –∑ –º–æ–¥—É–ª–µ–º –¥—É–º–∞–Ω–Ω—è —ñ —è–∫ —Ü–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏?",
            "list directory structure",
        ]

        start_time = time.time()

        for message in test_messages:
            detector.detect_chat_mode(message)

        end_time = time.time()
        avg_time = (end_time - start_time) / len(test_messages)

        if avg_time < 0.01:  #–ú–µ–Ω—à–µ 10–º—Å –Ω–∞ –∑–∞–ø–∏—Ç
            print(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥–º—ñ–Ω–Ω–∞: {avg_time*1000:.2f}–º—Å –Ω–∞ –∑–∞–ø–∏—Ç")
            results["passed"] += 1
        else:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–∏–π–Ω—è—Ç–Ω–∞: {avg_time*1000:.2f}–º—Å –Ω–∞ –∑–∞–ø–∏—Ç")
            results["passed"] += 0.5

        results["total"] += 1

    except Exception as e:
        results["issues"].append(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")

    #–ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –§–Ü–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print("=" * 60)

    success_rate = (results["passed"] / results["total"]) * 100 if results["total"] > 0 else 0

    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ: {results['passed']:.1f}/{results['total']}")
    print(f"üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%")

    if not results["issues"]:
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
        return True
    print(f"\n‚ö†Ô∏è  –ó–ù–ê–ô–î–ï–ù–û {len(results['issues'])} –ü–†–û–ë–õ–ï–ú:")
    for i, issue in enumerate(results["issues"], 1):
        print(f"{i:2d}. {issue}")

    if success_rate >= 80:
        print("\nüëç –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –¥–æ–±—Ä–µ, –∞–ª–µ –º–∞—î –Ω–µ–∑–Ω–∞—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏")
        return True
    print("\n‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å")
    return False

def demonstrate_intelligent_detection():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –Ü–ù–¢–ï–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ì–û –î–ï–¢–ï–ö–¢–û–†–ê")
    print("=" * 60)

    try:
        from intelligent_mode_detector import IntelligentModeDetector
        detector = IntelligentModeDetector()

        demo_queries = [
            "read file main.py",
            "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É –ø–∞–º'—è—Ç—ñ –≤ Atlas —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
            "search for memory manager",
            "–©–æ –Ω–µ —Ç–∞–∫ –∑ –º–æ–¥—É–ª–µ–º –¥—É–º–∞–Ω–Ω—è —ñ —á–æ–º—É –≤—ñ–Ω –Ω–µ –ø—Ä–∞—Ü—é—î —è–∫ –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è?",
            "list directory agents",
            "–Ø–∫ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –º–∏—Å–ª–µ–Ω–Ω—è AI –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å—É—á–∞—Å–Ω—ñ —Ç–µ—Ö–Ω—ñ–∫–∏?",
            "info about config.py",
            "–ü–æ—Ä—ñ–≤–Ω—è–π —Ä—ñ–∑–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –º–∏—Å–ª–µ–Ω–Ω—è –≤ AI —Å–∏—Å—Ç–µ–º–∞—Ö —Ç–∞ –≤–∏–∑–Ω–∞—á –Ω–∞–π–∫—Ä–∞—â—É",
        ]

        print("\nüîç –î–µ—Ç–µ–∫—Ü—ñ—è —Ä–µ–∂–∏–º—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤:\n")

        for query in demo_queries:
            result = detector.detect_chat_mode(query)

            mode_emoji = {
                "simple_command": "üîß",
                "advanced_thinking": "üß†",
                "hybrid": "üîÑ",
            }

            print(f"{mode_emoji.get(result.mode.value, '‚ùì')} –ó–∞–ø–∏—Ç: {query}")
            print(f"   üìä –†–µ–∂–∏–º: {result.mode.value}")
            print(f"   üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {result.confidence:.2f}")
            print(f"   üöÄ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ advanced: {'–¢–∞–∫' if result.should_use_advanced else '–ù—ñ'}")
            print(f"   üí≠ –û–±“ë—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è: {result.reasoning[:80]}...")
            print()

        #–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = detector.get_detection_stats()
        print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ü—ñ—ó:")
        for mode, count in stats["mode_counts"].items():
            percentage = (count / stats["total_detections"]) * 100
            print(f"   ‚Ä¢ {mode}: {count} ({percentage:.1f}%)")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")

if __name__ == "__main__":
    success = test_final_integration()
    demonstrate_intelligent_detection()

    if success:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–í–ù–Ü–°–¢–Æ –ì–û–¢–û–í–ê!")
        print("‚ú® –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º—ñ–≤ –ø—Ä–∞—Ü—é—î —ñ–¥–µ–∞–ª—å–Ω–æ!")
        print("üöÄ Advanced thinking –ø–ª–∞–≥—ñ–Ω —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ –∑ Atlas!")
    else:
        print("\n‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏")
