#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —á–∞—Ç—É Atlas –±–µ–∑ –ø–æ–º–∏–ª–æ–∫ OpenAI client
"""

import sys
from utils.llm_manager import LLMManager
from agents.token_tracker import TokenTracker
from config_manager import ConfigManager

def test_chat():
    """–¢–µ—Å—Ç —á–∞—Ç—É –±–µ–∑ –ø–æ–º–∏–ª–æ–∫"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —á–∞—Ç—É Atlas...")
    
    try:
        #Initialization –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        config_manager = ConfigManager()
        token_tracker = TokenTracker()
        
        #Initialization LLM Manager
        llm_manager = LLMManager(token_tracker, config_manager)
        print("‚úÖ LLM Manager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        #Verification –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
        providers = llm_manager.get_available_providers()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏: {list(providers.keys())}")
        
        #Verification –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        print(f"üîÑ –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {llm_manager.current_provider}")
        print(f"ü§ñ –ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å: {llm_manager.current_model}")
        
        #–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç—É
        if "gemini" in providers:
            print("üí¨ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —á–∞—Ç—É –∑ Gemini...")
            messages = [{"role": "user", "content": "–°–∫–∞–∂–∏ –ø—Ä–æ—Å—Ç–æ '–ü—Ä–∏–≤—ñ—Ç –≤—ñ–¥ Atlas!' —ñ –≤—Å–µ."}]
            
            try:
                response = llm_manager.chat(messages)
                print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–æ: {response.response_text[:100]}...")
                print(f"üìä –¢–æ–∫–µ–Ω–∏: {response.total_tokens}")
                
                #Verification, —á–∏ –Ω–µ–º–∞—î –ø–æ–º–∏–ª–æ–∫ OpenAI
                if "openai" not in response.response_text.lower() and "error" not in response.response_text.lower():
                    print("‚úÖ –ß–∞—Ç –ø—Ä–∞—Ü—é—î –±–µ–∑ –ø–æ–º–∏–ª–æ–∫ OpenAI!")
                else:
                    print("‚ö†Ô∏è  –ú–æ–∂–ª–∏–≤–æ —î –∑–≥–∞–¥–∫–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                    
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∞—Ç—É: {e}")
                return False
        else:
            print("‚ö†Ô∏è  Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç—É")
        
        #–¢–µ—Å—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ OpenAI availability
        openai_available = llm_manager.is_provider_available("openai")
        print(f"üîå OpenAI –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å: {openai_available}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    success = test_chat()
    if success:
        print("\nüéâ –¢–µ—Å—Ç —á–∞—Ç—É —É—Å–ø—ñ—à–Ω–∏–π! –ü–æ–º–∏–ª–∫–∏ OpenAI client –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        return 0
    else:
        print("\n‚ùå –¢–µ—Å—Ç —á–∞—Ç—É –Ω–µ –ø—Ä–æ–π—à–æ–≤")
        return 1

if __name__ == "__main__":
    sys.exit(main())
