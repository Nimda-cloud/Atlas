#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ ConfigManager
"""

import os
import sys
import tempfile
from pathlib import Path

from utils.config_manager import ConfigManager

#–î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

def test_unified_config():
    """–¢–µ—Å—Ç—É—î–º–æ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π ConfigManager."""
    print("üß™ –¢–ï–°–¢ –£–ù–Ü–§–Ü–ö–û–í–ê–ù–û–ì–û CONFIGMANAGER")
    print("=" * 50)

    #–°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π ConfigManager
    with tempfile.TemporaryDirectory() as tmpdir:
        config_path = Path(tmpdir) / "test_config.yaml"
        config_manager = ConfigManager(config_path)

        print("üîë –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤...")

        #–¢–µ—Å—Ç–æ–≤—ñ API –∫–ª—é—á—ñ
        test_keys = {
            "openai_api_key": "sk-test-openai-12345",
            "gemini_api_key": "gem-test-12345",
            "mistral_api_key": "mist-test-12345",
            "groq_api_key": "groq-test-12345",
        }

        #–ó–±–µ—Ä—ñ–≥–∞—î–º–æ API –∫–ª—é—á—ñ
        print("  üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è API –∫–ª—é—á—ñ–≤...")
        for key, value in test_keys.items():
            config_manager.set_setting(key, value)

        #–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ storage
        print("  üìñ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è...")
        for key, expected_value in test_keys.items():
            actual_value = config_manager.get_setting(key)
            if actual_value == expected_value:
                print(f"    ‚úÖ {key}: –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print(f"    ‚ùå {key}: –æ—á—ñ–∫—É–≤–∞–ª–∏ '{expected_value}', –æ—Ç—Ä–∏–º–∞–ª–∏ '{actual_value}'")

        #–¢–µ—Å—Ç—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏ API –∫–ª—é—á—ñ–≤
        print("  üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤...")

        openai_key = config_manager.get_openai_api_key()
        gemini_key = config_manager.get_gemini_api_key()
        mistral_key = config_manager.get_mistral_api_key()
        groq_key = config_manager.get_groq_api_key()

        print(f"    OpenAI: {openai_key}")
        print(f"    Gemini: {gemini_key}")
        print(f"    Mistral: {mistral_key}")
        print(f"    Groq: {groq_key}")

        #–¢–µ—Å—Ç—É—î–º–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä —ñ –º–æ–¥–µ–ª—å
        print("  ‚öôÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —ñ –º–æ–¥–µ–ª—ñ...")
        config_manager.set_setting("current_provider", "openai")
        config_manager.set_setting("current_model", "gpt-4")

        provider = config_manager.get_current_provider()
        model = config_manager.get_current_model()
        model_name = config_manager.get_model_name()

        print(f"    Provider: {provider}")
        print(f"    Model: {model}")
        print(f"    Model name: {model_name}")

        if provider == "openai" and model == "gpt-4" and model_name == "gpt-4":
            print("    ‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä —ñ –º–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            print("    ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –∞–±–æ –º–æ–¥–µ–ª–ª—é")

        print("\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")

if __name__ == "__main__":
    test_unified_config()
