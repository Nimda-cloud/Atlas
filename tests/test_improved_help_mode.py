#!/usr/bin/env python3
"""Test the improved help mode behavior."""

import sys

sys.path.append("/workspaces/Atlas")

try:
    from modules.agents.chat_context_manager import ChatContextManager

    #Initialize the context manager
    manager = ChatContextManager()

    print("üß™ Testing improved System Help mode...")

    #Test cases
    test_cases = [
        {
            "message": "–ú–µ–Ω–µ –û–ª–µ–≥. –†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–∞–Ω–æ–≥–æ –ü–û –ø–æ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤—ñ–π –ø–∞–º—è—Ç—ñ. –î–µ —ñ —è–∫ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ?",
            "expected_mode": "system_help",
            "description": "Technical memory implementation question",
        },
        {
            "message": "–Ø–∫—ñ —É —Ç–µ–±–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —ñ –¥–µ –≤–æ–Ω–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ?",
            "expected_mode": "tool_inquiry",  #Changed expectation
            "description": "Tools implementation question",
        },
        {
            "message": "–Ø–∫ –ø—Ä–∞—Ü—é—î —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º'—è—Ç—ñ –≤ Atlas?",
            "expected_mode": "system_help",
            "description": "Memory system technical question",
        },
    ]

    for i, test in enumerate(test_cases, 1):
        print(f"\n‚úÖ Test {i}: {test['description']}")
        print(f"   Input: '{test['message'][:50]}...'")

        #Analyze message
        context = manager.analyze_message(test["message"])
        mode_detected = context.mode.value
        confidence = context.confidence

        #Check detection
        if mode_detected == test["expected_mode"]:
            print(f"   ‚úÖ Mode: {mode_detected} (confidence: {confidence:.2f})")
        else:
            print(f"   ‚ùå Expected: {test['expected_mode']}, Got: {mode_detected} (confidence: {confidence:.2f})")

        #Generate response prompt
        prompt = manager.generate_response_prompt(context, test["message"])

        #Check if prompt encourages tool usage
        tool_usage_indicators = [
            "semantic_search", "file_search", "read_file", "grep_search",
            "ANALYZE THE CODEBASE", "Use your code analysis tools",
            "search for", "look for", "find",
        ]

        uses_tools = any(indicator in prompt for indicator in tool_usage_indicators)

        print(f"   üìã Prompt encourages tool usage: {'‚úÖ Yes' if uses_tools else '‚ùå No'}")

        #Show snippet of prompt
        snippet = prompt[:200].replace("\n", " ").strip() + "..."
        print(f"   üìù Prompt preview: {snippet}")

    print("\nüéØ System Help mode has been upgraded to:")
    print("   ‚Ä¢ Actively analyze codebase using tools")
    print("   ‚Ä¢ Provide specific implementation details")
    print("   ‚Ä¢ Reference actual files and code")
    print("   ‚Ä¢ Give technical expertise, not general overviews")

except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
