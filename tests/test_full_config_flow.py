#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–≤–Ω–æ–≥–æ —Ñ–ª–æ—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:
1. Storage API –∫–ª—é—á—ñ–≤
2. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
3. Verification, —â–æ –∫–ª—é—á—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
"""

import sys


def test_main_config_manager():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ConfigManager"""
    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ConfigManager...")

    #–Ü–º–ø–æ—Ä—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π ConfigManager
    from config_manager import ConfigManager

    config = ConfigManager()

    #–¢–µ—Å—Ç–æ–≤—ñ –∫–ª—é—á—ñ
    test_keys = {
        "openai_api_key": "sk-real-openai-key-12345",
        "gemini_api_key": "AIzaReal-gemini-key-67890",
        "mistral_api_key": "real-mistral-key-abcde",
        "groq_api_key": "gsk_real-groq-key-fghij",
    }

    #–ó–±–µ—Ä–µ–∂–µ–º–æ –∫–ª—é—á—ñ
    print("  üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è API –∫–ª—é—á—ñ–≤...")
    for key, value in test_keys.items():
        config.set_setting(key, value)

    #–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ storage
    print("  üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫–ª—é—á—ñ–≤...")
    saved_keys = {
        "openai_api_key": config.get_openai_api_key(),
        "gemini_api_key": config.get_gemini_api_key(),
        "mistral_api_key": config.get_mistral_api_key(),
        "groq_api_key": config.get_groq_api_key(),
    }

    for key, expected in test_keys.items():
        actual = saved_keys[key]
        if actual == expected:
            print(f"    ‚úÖ {key}: {actual[:10]}...")
        else:
            print(f"    ‚ùå {key}: –æ—á—ñ–∫—É–≤–∞–≤—Å—è {expected[:10]}..., –æ—Ç—Ä–∏–º–∞–Ω–æ {actual[:10]}...")
            return False

    #–°—Ç–≤–æ—Ä–µ–º–æ new –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    print("  üîÑ –°–∏–º—É–ª—è—Ü—ñ—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É (–Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä)...")
    config2 = ConfigManager()

    #–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —â–æ –∫–ª—é—á—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—è
    reloaded_keys = {
        "openai_api_key": config2.get_openai_api_key(),
        "gemini_api_key": config2.get_gemini_api_key(),
        "mistral_api_key": config2.get_mistral_api_key(),
        "groq_api_key": config2.get_groq_api_key(),
    }

    print("  üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –∫–ª—é—á—ñ–≤...")
    for key, expected in test_keys.items():
        actual = reloaded_keys[key]
        if actual == expected:
            print(f"    ‚úÖ {key}: {actual[:10]}...")
        else:
            print(f"    ‚ùå {key}: –æ—á—ñ–∫—É–≤–∞–≤—Å—è {expected[:10]}..., –æ—Ç—Ä–∏–º–∞–Ω–æ {actual[:10]}...")
            return False

    return True

def test_utils_config_manager():
    """–¢–µ—Å—Ç utils ConfigManager"""
    print("\nüîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è utils ConfigManager...")

    #–Ü–º–ø–æ—Ä—Ç—É—î–º–æ utils ConfigManager
    from utils.config_manager import ConfigManager

    config = ConfigManager()

    #–¢–µ—Å—Ç–æ–≤—ñ –∫–ª—é—á—ñ
    test_keys = {
        "openai_api_key": "sk-utils-openai-key-12345",
        "gemini_api_key": "AIzaUtils-gemini-key-67890",
        "mistral_api_key": "utils-mistral-key-abcde",
        "groq_api_key": "gsk_utils-groq-key-fghij",
    }

    #–ó–±–µ—Ä–µ–∂–µ–º–æ –∫–ª—é—á—ñ
    print("  üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è API –∫–ª—é—á—ñ–≤...")
    for key, value in test_keys.items():
        config.set_setting(key, value)

    #–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ storage
    print("  üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫–ª—é—á—ñ–≤...")
    saved_keys = {
        "openai_api_key": config.get_openai_api_key(),
        "gemini_api_key": config.get_gemini_api_key(),
        "mistral_api_key": config.get_mistral_api_key(),
        "groq_api_key": config.get_groq_api_key(),
    }

    for key, expected in test_keys.items():
        actual = saved_keys[key]
        if actual == expected:
            print(f"    ‚úÖ {key}: {actual[:10]}...")
        else:
            print(f"    ‚ùå {key}: –æ—á—ñ–∫—É–≤–∞–≤—Å—è {expected[:10]}..., –æ—Ç—Ä–∏–º–∞–Ω–æ {actual[:10]}...")
            return False

    return True

def test_llm_manager_integration():
    """–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ LLMManager"""
    print("\nü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ LLMManager...")

    try:
        from config_manager import ConfigManager
        from utils.llm_manager import LLMManager

        config = ConfigManager()

        #–í—Å—Ç–∞–Ω–æ–≤–∏–º–æ —Ä–µ–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ –∫–ª—é—á—ñ
        config.set_setting("openai_api_key", "sk-test-valid-openai-key-at-least-20-chars")
        config.set_setting("gemini_api_key", "AIzaTest-valid-gemini-key-at-least-20-chars")
        config.set_setting("current_provider", "openai")
        config.set_setting("current_model", "gpt-4")

        #–°—Ç–≤–æ—Ä–µ–º–æ LLMManager
        llm = LLMManager(config)

        print("  ‚úÖ LLMManager —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        print(f"  üîë –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {llm.current_provider}")
        print(f"  ü§ñ –ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å: {llm.current_model}")

        return True

    except Exception as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ LLMManager: {e}")
        return False

def main():
    print("üß™ –ü–û–í–ù–ò–ô –¢–ï–°–¢ –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–ô–ù–û–ì–û –§–õ–û–£")
    print("=" * 50)

    success = True

    #–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ConfigManager
    if not test_main_config_manager():
        success = False

    #–¢–µ—Å—Ç utils ConfigManager
    if not test_utils_config_manager():
        success = False

    #–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ LLMManager
    if not test_llm_manager_integration():
        success = False

    print("\n" + "=" * 50)
    if success:
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò!")
        print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ API –∫–ª—é—á—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è")
        print("‚úÖ LLMManager —ñ–Ω—Ç–µ–≥—Ä—É—î—Ç—å—Å—è –±–µ–∑ –ø–æ–º–∏–ª–æ–∫")
    else:
        print("‚ùå –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ù–ï –ü–†–û–ô–®–õ–ò")
        print("üîß –ü–æ—Ç—Ä–µ–±—É—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")

    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
