#!/usr/bin/env python3
"""
–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª—è –¥—É–º–∞–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É Atlas
–í–∏—è–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º–∏ –≤ advanced_thinking.py —Ç–∞ –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
"""

import importlib.util
import sys
import traceback
from pathlib import Path


def diagnose_thinking_module():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è –¥—É–º–∞–Ω–Ω—è"""
    print("üß† –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ú–û–î–£–õ–Ø –î–£–ú–ê–ù–ù–Ø ATLAS")
    print("=" * 50)

    issues_found = []

    # 1. Verification —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
    print("\n1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–π–ª—ñ–≤...")

    base_dir = Path("/Users/developer/Documents/Atlas")
    thinking_file = base_dir / "plugins" / "helper_sync_tell" / "advanced_thinking.py"
    hybrid_file = base_dir / "plugins" / "helper_sync_tell" / "hybrid_integration.py"

    if not thinking_file.exists():
        issues_found.append("‚ùå –§–∞–π–ª advanced_thinking.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("‚úÖ advanced_thinking.py –∑–Ω–∞–π–¥–µ–Ω–æ")

    if not hybrid_file.exists():
        issues_found.append("‚ùå –§–∞–π–ª hybrid_integration.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("‚úÖ hybrid_integration.py –∑–Ω–∞–π–¥–µ–Ω–æ")

    # 2. Verification —ñ–º–ø–æ—Ä—Ç—ñ–≤
    print("\n2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —Ç–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤...")

    # –î–æ–¥–∞—î–º–æ —à–ª—è—Ö–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
    sys.path.insert(0, str(base_dir))
    sys.path.insert(0, str(base_dir / "plugins" / "helper_sync_tell"))

    try:
        # Verification platform_utils
        from utils.platform_utils import IS_HEADLESS, IS_LINUX, IS_MACOS

        print("‚úÖ platform_utils –¥–æ—Å—Ç—É–ø–Ω—ñ")
    except ImportError as e:
        issues_found.append(f"‚ö†Ô∏è  platform_utils –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")

    try:
        # Verification memory_manager
        from modules.agents.enhanced_memory_manager import MemoryScope, MemoryType

        print("‚úÖ enhanced_memory_manager –¥–æ—Å—Ç—É–ø–Ω–∏–π")
    except ImportError as e:
        issues_found.append(f"‚ö†Ô∏è  enhanced_memory_manager –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")

    # 3. Verification –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    print("\n3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ advanced_thinking –º–æ–¥—É–ª—è...")

    try:
        spec = importlib.util.spec_from_file_location(
            "advanced_thinking", thinking_file
        )
        advanced_thinking = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(advanced_thinking)
        print("‚úÖ advanced_thinking –º–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")

        # Verification –∫–ª–∞—Å—ñ–≤
        if hasattr(advanced_thinking, "AdvancedAIThinkingTool"):
            print("‚úÖ AdvancedAIThinkingTool –∫–ª–∞—Å –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            issues_found.append("‚ùå AdvancedAIThinkingTool –∫–ª–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        if hasattr(advanced_thinking, "ThinkingStrategy"):
            print("‚úÖ ThinkingStrategy enum –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            issues_found.append("‚ùå ThinkingStrategy enum –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        if hasattr(advanced_thinking, "register"):
            print("‚úÖ register —Ñ—É–Ω–∫—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞")
        else:
            issues_found.append("‚ùå register —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

    except Exception as e:
        issues_found.append(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è advanced_thinking: {e}")
        traceback.print_exc()

    # 4. Verification —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
    print("\n4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ...")

    try:
        tool = advanced_thinking.AdvancedAIThinkingTool()
        print("‚úÖ AdvancedAIThinkingTool –º–æ–∂–µ –±—É—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π")

        # Verification –º–µ—Ç–æ–¥—ñ–≤
        required_methods = [
            "analyze_query_context",
            "select_thinking_strategy",
            "generate_strategic_questions",
            "analyze_with_meta_cognition",
            "synthesize_with_refinement",
            "process_with_advanced_thinking",
        ]

        for method in required_methods:
            if hasattr(tool, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} —ñ—Å–Ω—É—î")
            else:
                issues_found.append(f"‚ùå –ú–µ—Ç–æ–¥ {method} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø–∏—Ç—É
        try:
            tool.process_with_advanced_thinking("–¢–µ—Å—Ç –∑–∞–ø–∏—Ç—É")
            print("‚úÖ –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        except Exception as e:
            issues_found.append(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É: {e}")

    except Exception as e:
        issues_found.append(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É: {e}")

    # 5. Verification —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
    print("\n5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó...")

    try:
        register_result = advanced_thinking.register()
        if register_result and "tools" in register_result:
            print("‚úÖ –§—É–Ω–∫—Ü—ñ—è register –ø—Ä–∞—Ü—é—î")
        else:
            issues_found.append("‚ö†Ô∏è  register –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    except Exception as e:
        issues_found.append(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")

    # 6. –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    print("\n6. –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")

    try:
        tool = advanced_thinking.AdvancedAIThinkingTool()
        config = tool.config
        print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: {len(config)} –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤")

        # Verification –∫–ª—é—á–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        key_params = ["max_sub_questions", "confidence_threshold", "thinking_timeout"]
        for param in key_params:
            if param in config:
                print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä {param}: {config[param]}")
            else:
                issues_found.append(f"‚ö†Ô∏è  –í—ñ–¥—Å—É—Ç–Ω—ñ–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")

    except Exception as e:
        issues_found.append(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")

    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 50)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 50)

    if not issues_found:
        print("üéâ –£–°–ü–Ü–•! –ú–æ–¥—É–ª—å –¥—É–º–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        return True
    print(f"‚ö†Ô∏è  –ó–ù–ê–ô–î–ï–ù–û {len(issues_found)} –ü–†–û–ë–õ–ï–ú:")
    for i, issue in enumerate(issues_found, 1):
        print(f"{i:2d}. {issue}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
    if any("platform_utils" in issue for issue in issues_found):
        print("‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å utils/platform_utils.py")
    if any("memory_manager" in issue for issue in issues_found):
        print("‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å agents/enhanced_memory_manager.py")
    if any("–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" in issue for issue in issues_found):
        print("‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ç–∞ —ñ–º–ø–æ—Ä—Ç–∏ –≤ advanced_thinking.py")
    if any("–º–µ—Ç–æ–¥" in issue for issue in issues_found):
        print("‚Ä¢ –î–æ–ø–æ–≤–Ω—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ –≤ AdvancedAIThinkingTool")

    return False


def analyze_algorithm_structure():
    """–ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—É"""
    print("\nüîç –ê–ù–ê–õ–Ü–ó –°–¢–†–£–ö–¢–£–†–ò –ê–õ–ì–û–†–ò–¢–ú–£")
    print("=" * 50)

    try:
        thinking_file = Path(
            "/Users/developer/Documents/Atlas/plugins/helper_sync_tell/advanced_thinking.py"
        )
        content = thinking_file.read_text()

        # –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑:")

        classes = content.count("class ")
        functions = content.count("def ")
        strategies = content.count("ThinkingStrategy.")
        phases = content.count("Phase")

        print(f"‚Ä¢ –ö–ª–∞—Å—ñ–≤: {classes}")
        print(f"‚Ä¢ –§—É–Ω–∫—Ü—ñ–π/–º–µ—Ç–æ–¥—ñ–≤: {functions}")
        print(f"‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥—ñ–π –º–∏—Å–ª–µ–Ω–Ω—è: {strategies}")
        print(f"‚Ä¢ –§–∞–∑ –æ–±—Ä–æ–±–∫–∏: {phases}")

        # –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–∑ –∞–ª–≥–æ—Ä–∏—Ç–º—É
        print("\nüîÑ –§–∞–∑–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—É:")
        if "Phase 1" in content:
            print("‚úÖ –§–∞–∑–∞ 1: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
        if "Phase 2" in content:
            print("‚úÖ –§–∞–∑–∞ 2: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å")
        if "Phase 3" in content:
            print("‚úÖ –§–∞–∑–∞ 3: –ú–µ—Ç–∞-–∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
        if "Phase 4" in content:
            print("‚úÖ –§–∞–∑–∞ 4: –°–∏–Ω—Ç–µ–∑ –∑ —É–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è–º")
        if "Phase 5" in content:
            print("‚úÖ –§–∞–∑–∞ 5: –ú–µ—Ç–∞-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        # –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
        print("\nüéØ –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –º–∏—Å–ª–µ–Ω–Ω—è:")
        strategies_found = []
        if "ANALYTICAL" in content:
            strategies_found.append("–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞")
        if "EXPLORATORY" in content:
            strategies_found.append("–î–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫–∞")
        if "ARCHITECTURAL" in content:
            strategies_found.append("–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∞")
        if "TROUBLESHOOTING" in content:
            strategies_found.append("–£—Å—É–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º")
        if "CREATIVE" in content:
            strategies_found.append("–¢–≤–æ—Ä—á–∞")
        if "CONTEXTUAL" in content:
            strategies_found.append("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞")

        for strategy in strategies_found:
            print(f"‚úÖ {strategy}")

        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏: {e}")
        return False


if __name__ == "__main__":
    success = diagnose_thinking_module()
    analyze_algorithm_structure()

    if success:
        print("\nüéØ –ú–æ–¥—É–ª—å –¥—É–º–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
        exit(0)
    else:
        print("\n‚ö†Ô∏è  –ü–æ—Ç—Ä–µ–±—É—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º.")
        exit(1)
