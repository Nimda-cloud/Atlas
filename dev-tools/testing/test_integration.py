#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ Atlas

–¶–µ–π —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
1. CreatorAuthentication –∑ –º–µ—Ç–æ–¥–æ–º process_message_for_creator_detection
2. –§–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ ChatContextManager
3. –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É
"""

import os
import sys

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ Atlas (–¥–≤–∞ —Ä—ñ–≤–Ω—ñ –≤–≥–æ—Ä—É –≤—ñ–¥ dev-tools/testing/)
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", ".."))

def test_creator_authentication():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–≤–æ—Ä—Ü—è"""
    print("üîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è CreatorAuthentication...")

    from agents.creator_authentication import CreatorAuthentication

    auth = CreatorAuthentication()

    # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ç–æ–¥—É process_message_for_creator_detection
    test_messages = [
        "–ü—Ä–∏–≤—ñ—Ç, —è —Ç–≤–æ—Ä–µ—Ü—å Atlas",
        "–Ø —Ä–æ–∑—Ä–æ–±–∏–≤ —Ü—é —Å–∏—Å—Ç–µ–º—É",
        "–ó–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
    ]

    print("  üìã –¢–µ—Å—Ç –≤–∏—è–≤–ª–µ–Ω–Ω—è —Ç–≤–æ—Ä—Ü—è:")
    for msg in test_messages:
        try:
            result = auth.process_message_for_creator_detection(msg)
            print(f"    ‚úÖ '{msg[:30]}...' -> {result}")
        except Exception as e:
            print(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return False

    # –¢–µ—Å—Ç 2: –ï–º–æ—Ü—ñ–π–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—è–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è)
    print("  üíñ –¢–µ—Å—Ç –µ–º–æ—Ü—ñ–π–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:")
    try:
        response = auth.get_creator_emotional_response("greeting")
        print(f"    ‚úÖ Greeting response: {response[:50]}...")
    except Exception as e:
        print(f"    ‚ö†Ô∏è –ï–º–æ—Ü—ñ–π–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π —Å–µ—Å—ñ—ó: {e}")

    return True

def test_formatting_functions():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
    print("\nüìù –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π...")

    from agents.chat_context_manager import ChatContextManager

    manager = ChatContextManager()

    test_text = "—Ç–µ—Å—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç"

    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    tests = [
        ("Bold", manager.format_bold, f"**{test_text}**"),
        ("Italic", manager.format_italic, f"*{test_text}*"),
        ("Code", manager.format_code, f"`{test_text}`"),
        ("Quote", manager.format_quote, f"> {test_text}"),
        ("Link", lambda t: manager.format_link(t, "http://example.com"), f"[{test_text}](http://example.com)"),
    ]

    for name, func, expected in tests:
        try:
            result = func(test_text)
            if result == expected:
                print(f"    ‚úÖ {name}: {result}")
            else:
                print(f"    ‚ùå {name}: Expected '{expected}', got '{result}'")
                return False
        except Exception as e:
            print(f"    ‚ùå {name}: –ü–æ–º–∏–ª–∫–∞ {e}")
            return False

    return True

def test_translation_system():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
    print("\nüåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É...")

    from tools.translation_tool import TranslationTool

    tool = TranslationTool()

    # –¢–µ—Å—Ç –≤–∏—è–≤–ª–µ–Ω–Ω—è –º–æ–≤–∏
    test_texts = [
        ("–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?", "uk"),
        ("Hello, how are you?", "en"),
        ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", "ru"),
    ]

    print("  üîç –¢–µ—Å—Ç –≤–∏—è–≤–ª–µ–Ω–Ω—è –º–æ–≤–∏:")
    for text, expected_lang in test_texts:
        try:
            detected_lang, confidence = tool.detect_language(text)
            if detected_lang == expected_lang:
                print(f"    ‚úÖ '{text}' -> {detected_lang} (confidence: {confidence:.2f})")
            else:
                print(f"    ‚ö†Ô∏è '{text}' -> Expected {expected_lang}, got {detected_lang} (confidence: {confidence:.2f})")
        except Exception as e:
            print(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return False

    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üß™ –ó–ê–ü–£–°–ö –Ü–ù–¢–ï–ì–†–ê–¶–Ü–ô–ù–ò–• –¢–ï–°–¢–Ü–í ATLAS")
    print("=" * 50)

    tests = [
        ("CreatorAuthentication", test_creator_authentication),
        ("Formatting Functions", test_formatting_functions),
        ("Translation System", test_translation_system),
    ]

    passed = 0
    failed = 0

    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {test_name}")
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù–û")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù–û")
                failed += 1
        except Exception as e:
            print(f"‚ùå {test_name}: –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê - {e}")
            failed += 1

    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"   ‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed}")
    print(f"   üìà –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{passed + failed}")

    if failed == 0:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        return True
    print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏.")
    return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
