#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É —Ç–∞ API –∫–ª—é—á—ñ–≤
"""

import os
from pathlib import Path

def test_env_loading():
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É")
    print("=" * 50)
    
    # –Ü–º–ø–æ—Ä—Ç —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ .env
        env_file = Path('.env')
        if env_file.exists():
            print(f"‚úÖ .env —Ñ–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ: {env_file.absolute()}")
            load_dotenv()
            print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        else:
            print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–ª—é—á—ñ
        keys_to_check = [
            "OPENAI_API_KEY",
            "GEMINI_API_KEY", 
            "GROQ_API_KEY",
            "MISTRAL_API_KEY",
            "DEFAULT_LLM_PROVIDER",
            "DEFAULT_LLM_MODEL"
        ]
        
        found_keys = []
        for key in keys_to_check:
            value = os.getenv(key, '')
            if value:
                # –ù–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–≤–Ω—ñ –∫–ª—é—á—ñ
                if 'API_KEY' in key:
                    display_value = f"{value[:8]}..." if len(value) > 8 else value
                else:
                    display_value = value
                print(f"‚úÖ {key}: {display_value}")
                found_keys.append(key)
            else:
                print(f"‚ùå {key}: –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        print(f"\nüìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(found_keys)} –∑ {len(keys_to_check)} –∑–º—ñ–Ω–Ω–∏—Ö")
        
        # –¢–µ—Å—Ç ConfigManager
        print("\nüîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ConfigManager...")
        try:
            from config_manager import ConfigManager
            config = ConfigManager()
            print("‚úÖ ConfigManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            
            # –¢–µ—Å—Ç –º–µ—Ç–æ–¥—ñ–≤
            provider = config.get_current_provider()
            model = config.get_current_model()
            gemini_key = config.get_gemini_api_key()
            
            print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
            print(f"‚úÖ –ú–æ–¥–µ–ª—å: {model}")
            print(f"‚úÖ Gemini –∫–ª—é—á: {'–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if gemini_key else '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ ConfigManager: {e}")
            return False
            
        return len(found_keys) > 0
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_env_loading()
    if success:
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("üöÄ Atlas –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É!")
    else:
        print("\n‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.")
