#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ç–∞ memory manager.
"""

import sys
sys.path.append('/Users/dev/Documents/autoclicker')

from utils.config_manager import ConfigManager
from agents.enhanced_memory_manager import EnhancedMemoryManager, MemoryScope, MemoryType
from utils.llm_manager import LLMManager

def test_api_keys_saving():
    """–¢–µ—Å—Ç storage —Ç–∞ loading API –∫–ª—é—á—ñ–≤."""
    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API –∫–ª—é—á—ñ–≤...")
    
    config_manager = ConfigManager()
    
    #–°—Ç–≤–æ—Ä–∏–º–æ —Ç–µ—Å—Ç–æ–≤—ñ settings
    test_settings = {
        "api_keys": {
            "openai": "test_openai_key",
            "gemini": "test_gemini_key", 
            "anthropic": "test_anthropic_key",
            "groq": "test_groq_key",
            "mistral": "test_mistral_key",
        },
        "current_provider": "gemini"
    }
    
    #–ó–±–µ—Ä–µ–∂–µ–º–æ
    config_manager.save(test_settings)
    print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
    
    #–ó–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ –∑–Ω–æ–≤—É
    loaded_settings = config_manager.load()
    
    #–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –≤—Å—ñ –∫–ª—é—á—ñ –Ω–∞ –º—ñ—Å—Ü—ñ
    api_keys = loaded_settings.get("api_keys", {})
    
    expected_keys = ["openai", "gemini", "anthropic", "groq", "mistral"]
    for key in expected_keys:
        if key in api_keys:
            print(f"‚úÖ {key}: {api_keys[key]}")
        else:
            print(f"‚ùå {key}: –ù–ï –ó–ù–ê–ô–î–ï–ù–û")
    
    #–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    provider = loaded_settings.get("current_provider", "")
    print(f"üéØ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
    
    return loaded_settings

def test_memory_manager():
    """–¢–µ—Å—Ç memory manager –º–µ—Ç–æ–¥—ñ–≤."""
    print("\nüß† –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è EnhancedMemoryManager...")
    
    config_manager = ConfigManager()
    llm_manager = LLMManager(config_manager)
    
    memory_manager = EnhancedMemoryManager(llm_manager, config_manager)
    
    #–¢–µ—Å—Ç add_memory_for_agent
    try:
        memory_id = memory_manager.add_memory_for_agent(
            agent_type=MemoryScope.CHAT_CONTEXT,
            memory_type=MemoryType.CASUAL_CHAT,
            content="–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            metadata={"test": True}
        )
        print("‚úÖ add_memory_for_agent –ø—Ä–∞—Ü—é—î")
    except Exception as e:
        print(f"‚ùå add_memory_for_agent –ù–ï –ø—Ä–∞—Ü—é—î: {e}")
    
    #–¢–µ—Å—Ç store_memory (—Å—Ç–∞—Ä–∏–π API)
    try:
        memory_id = memory_manager.store_memory(
            agent_name="chat_context",
            memory_type=MemoryType.CASUAL_CHAT,
            content="–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ store_memory",
            metadata={"test": True}
        )
        print("‚úÖ store_memory –ø—Ä–∞—Ü—é—î")
    except Exception as e:
        print(f"‚ùå store_memory –ù–ï –ø—Ä–∞—Ü—é—î: {e}")
        
    #–¢–µ—Å—Ç retrieve_memories
    try:
        memories = memory_manager.retrieve_memories(
            agent_name="chat_context",
            memory_type=MemoryType.CASUAL_CHAT,
            query="—Ç–µ—Å—Ç",
            limit=5
        )
        print(f"‚úÖ retrieve_memories –ø—Ä–∞—Ü—é—î (–∑–Ω–∞–π–¥–µ–Ω–æ {len(memories)} —Å–ø–æ–≥–∞–¥—ñ–≤)")
    except Exception as e:
        print(f"‚ùå retrieve_memories –ù–ï –ø—Ä–∞—Ü—é—î: {e}")

def test_llm_manager_providers():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤."""
    print("\nü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è LLMManager –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤...")
    
    config_manager = ConfigManager()
    llm_manager = LLMManager(config_manager)
    
    providers = llm_manager.get_available_providers()
    print(f"üéØ –î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏: {list(providers.keys())}")
    
    for provider, models in providers.items():
        print(f"  üìã {provider}: {len(models)} –º–æ–¥–µ–ª–µ–π")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å Atlas...")
    print("=" * 60)
    
    #–¢–µ—Å—Ç 1: API –∫–ª—é—á—ñ
    settings = test_api_keys_saving()
    
    #–¢–µ—Å—Ç 2: Memory Manager
    test_memory_manager()
    
    #–¢–µ—Å—Ç 3: LLM Manager
    test_llm_manager_providers()
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
