#!/usr/bin/env python3
"""
–¢–µ—Å—Ç LLMManager –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤.
"""

import sys
sys.path.append('/Users/dev/Documents/autoclicker')

from utils.config_manager import ConfigManager

#–Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —á–∞—Å—Ç–∏–Ω—É LLMManager, —â–æ –Ω–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å
def test_provider_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ –±–µ–∑ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó memory manager."""
    print("ü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤...")
    
    config_manager = ConfigManager()
    
    #–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —è–∫—ñ –∫–ª—é—á—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ
    providers_with_keys = []
    
    if config_manager.get_openai_api_key():
        providers_with_keys.append("openai")
    
    if config_manager.get_gemini_api_key():
        providers_with_keys.append("gemini")
        
    if config_manager.get_setting('groq_api_key'):
        providers_with_keys.append("groq")
        
    if config_manager.get_setting('mistral_api_key'):
        providers_with_keys.append("mistral")
    
    #Ollama –∑–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–∏–π)
    providers_with_keys.append("ollama")
    
    print(f"üéØ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∏ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏: {providers_with_keys}")
    
    return providers_with_keys

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤...")
    print("=" * 50)
    
    providers = test_provider_availability()
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
