#!/usr/bin/env python3
"""
–¢–µ—Å—Ç loading —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from dotenv import load_dotenv
load_dotenv()

from utils.config_manager import ConfigManager
from agents.token_tracker import TokenTracker
from agents.llm_manager import LLMManager
from agents.enhanced_memory_manager import EnhancedMemoryManager
from agents.agent_manager import AgentManager

def test_tools_loading():
    print("üîß –¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤")
    print("=" * 50)
    
    try:
        #Initialization —è–∫ –≤ main.py
        print("üìã –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤...")
        config_manager = ConfigManager()
        token_tracker = TokenTracker()
        
        print("ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è LLMManager...")
        llm_manager = LLMManager(token_tracker=token_tracker, config_manager=config_manager)
        
        print("üß† –°—Ç–≤–æ—Ä–µ–Ω–Ω—è MemoryManager...")
        memory_manager = EnhancedMemoryManager(llm_manager=llm_manager, config_manager=config_manager)
        
        print("‚öôÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è AgentManager...")
        agent_manager = AgentManager(llm_manager=llm_manager, memory_manager=memory_manager)
        
        print("‚úÖ –í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        #–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
        print("\nüõ†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤:")
        tool_names = agent_manager.get_tool_names()
        print(f"üìä –í—Å—å–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {len(tool_names)}")
        
        if tool_names:
            print("üìã –°–ø–∏—Å–æ–∫ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤:")
            for i, tool_name in enumerate(sorted(tool_names), 1):
                print(f"  {i:2d}. {tool_name}")
        else:
            print("‚ùå –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        
        #–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ
        print("\nüìÑ –î–µ—Ç–∞–ª—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤:")
        tools_details = agent_manager.get_all_tools_details()
        print(f"üìä –î–µ—Ç–∞–ª–µ–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {len(tools_details)}")
        
        builtin_count = 0
        generated_count = 0
        
        for tool in tools_details:
            tool_type = tool.get('type', 'unknown')
            if tool_type == 'generated':
                generated_count += 1
            else:
                builtin_count += 1
        
        print(f"üîß –í–±—É–¥–æ–≤–∞–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: {builtin_count}")
        print(f"üéØ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: {generated_count}")
        
        if builtin_count == 0:
            print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –í–±—É–¥–æ–≤–∞–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å!")
        
        return len(tool_names) > 0
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_tools_loading()
    
    if success:
        print("\nüéâ –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤!")
