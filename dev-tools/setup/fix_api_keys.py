#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ API –∫–ª—é—á–∞–º–∏ –≤ Atlas
"""

import os
import shutil
import yaml
from pathlib import Path

def clear_atlas_data():
    """–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ data Atlas"""
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö Atlas...")
    
    #–ú–æ–∂–ª–∏–≤—ñ —à–ª—è—Ö–∏ –¥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    atlas_paths = [
        Path.home() / ".atlas",
        Path("/Users/dev/.atlas"),
        Path("~/.atlas").expanduser(),
        Path(".atlas"),
    ]
    
    for path in atlas_paths:
        if path.exists():
            print(f"  üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è {path}")
            shutil.rmtree(path, ignore_errors=True)
    
    #–í–∏–¥–∞–ª–∏—Ç–∏ –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É
    chroma_paths = [
        Path("chroma.db"),
        Path("memory"),
        Path("*.db"),
    ]
    
    for pattern in ["chroma*", "*.db", "memory"]:
        import glob
        for file in glob.glob(pattern):
            print(f"  üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è {file}")
            if os.path.isdir(file):
                shutil.rmtree(file, ignore_errors=True)
            else:
                os.remove(file)

def create_clean_config():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–∏—Å—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
    print("üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∏—Å—Ç–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    
    config_dir = Path.home() / ".atlas"
    config_dir.mkdir(exist_ok=True)
    
    config = {
        "api_keys": {
            "openai": "",
            "gemini": "",
            "groq": "",
            "mistral": "",
            "anthropic": ""
        },
        "current_provider": "gemini",
        "current_model": "gemini-1.5-flash",
        "agents": {
            "Browser Agent": {"provider": "gemini", "model": "gemini-1.5-flash"},
            "Screen Agent": {"provider": "gemini", "model": "gemini-1.5-flash"},
            "Text Agent": {"provider": "gemini", "model": "gemini-1.5-flash"},
            "System Interaction Agent": {"provider": "gemini", "model": "gemini-1.5-flash"},
        },
        "security": {
            "destructive_op_threshold": 80,
            "api_usage_threshold": 50,
            "file_access_threshold": 70,
            "rules": []
        }
    }
    
    config_file = config_dir / "config.yaml"
    with open(config_file, 'w') as f:
        yaml.dump(config, f, default_flow_style=False)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: {config_file}")

def check_env_variables():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–∞ .env —Ñ–∞–π–ª"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–∞ .env —Ñ–∞–π–ª—É...")
    
    env_vars = [
        "OPENAI_API_KEY",
        "GEMINI_API_KEY", 
        "GROQ_API_KEY",
        "MISTRAL_API_KEY"
    ]
    
    #–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ .env —Ñ–∞–π–ª
    env_file = Path(".env")
    if env_file.exists():
        print(f"  ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ .env —Ñ–∞–π–ª: {env_file.absolute()}")
        from dotenv import load_dotenv
        load_dotenv()
    else:
        print("  ‚ùå .env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    found_keys = []
    for var in env_vars:
        value = os.getenv(var)
        if value and value != "your_real_gemini_key_here" and value != "your_real_mistral_key_here" and value != "your_real_groq_key_here":
            print(f"  ‚úÖ {var}: {'*' * max(1, len(value) - 8)}{value[-8:] if len(value) > 8 else value[-4:]}")
            found_keys.append(var)
        else:
            print(f"  ‚ùå {var}: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —î —Ç–µ—Å—Ç–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º")
    
    return found_keys

def main():
    print("üîß Atlas API Keys Fix Script")
    print("=" * 50)
    
    #1. –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ data
    clear_atlas_data()
    
    #2. –°—Ç–≤–æ—Ä–∏—Ç–∏ —á–∏—Å—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é  
    create_clean_config()
    
    #3. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    found_keys = check_env_variables()
    
    print("\n" + "=" * 50)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    if found_keys:
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ API –∫–ª—é—á—ñ: {', '.join(found_keys)}")
        print("üìù Atlas –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–ª—é—á—ñ –∑ .env —Ñ–∞–π–ª—É")
    else:
        print("‚ùå API –∫–ª—é—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –º–∞—é—Ç—å —Ç–µ—Å—Ç–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
        print("üìù –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Å–ø—Ä–∞–≤–∂–Ω—ñ –∫–ª—é—á—ñ:")
        print("   1. –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª —É –∫–æ—Ä–µ–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É")
        print("   2. –ê–±–æ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —á–µ—Ä–µ–∑ GUI Atlas (–≤–∫–ª–∞–¥–∫–∞ Settings)")
        print("   3. –ê–±–æ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:")
        print("      export GEMINI_API_KEY='your_real_key_here'")
        print("      export MISTRAL_API_KEY='your_real_key_here'")
    
    print(f"\nüí° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∫–ª—é—á—ñ–≤: .env —Ñ–∞–π–ª ‚Üí –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ‚Üí GUI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è")
    print("üöÄ –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å Atlas!")

if __name__ == "__main__":
    main()
