#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∞ verification —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ —Ä–µ–∞–ª—å–Ω–∏–º Atlas
"""

import sys
from pathlib import Path

#–î–æ–¥–∞—î–º–æ —à–ª—è—Ö–∏
base_dir = Path("/Users/developer/Documents/Atlas")
sys.path.insert(0, str(base_dir))

def check_atlas_integration():
    """Verification —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ —Ä–µ–∞–ª—å–Ω–∏–º Atlas"""
    print("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –ó ATLAS")
    print("=" * 40)
    
    #Verification –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤
    files_to_check = [
        "intelligent_mode_detector.py",
        "plugins/helper_sync_tell/advanced_thinking.py",
        "main.py"
    ]
    
    print("\nüìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤:")
    for file_path in files_to_check:
        full_path = base_dir / file_path
        if full_path.exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    #Verification —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó advanced_thinking
    print("\nüîó –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó advanced_thinking:")
    try:
        sys.path.insert(0, str(base_dir / "plugins" / "helper_sync_tell"))
        from advanced_thinking import register
        
        #–¢–µ—Å—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        result = register()
        if result and 'tools' in result:
            tool = result['tools'][0]
            print(f"‚úÖ Advanced thinking tool –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {tool.__class__.__name__}")
            
            #Verification capabilities
            if hasattr(tool, 'capabilities'):
                caps = tool.capabilities
                print("üìä –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:")
                for cap, available in caps.items():
                    status = "‚úÖ" if available else "‚ùå"
                    print(f"   {status} {cap}")
            
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó advanced thinking")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É advanced_thinking: {e}")
    
    #Verification –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    print("\nüß† –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞:")
    try:
        from intelligent_mode_detector import IntelligentModeDetector
        
        detector = IntelligentModeDetector()
        
        #–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç
        test_result = detector.detect_chat_mode("–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Å–∏—Å—Ç–µ–º—É Atlas")
        print(f"‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä –ø—Ä–∞—Ü—é—î: {test_result.mode.value} (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {test_result.confidence:.2f})")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
    
    #Verification main.py
    print("\nüì± –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ main.py:")
    try:
        with open(base_dir / "main.py", 'r', encoding='utf-8') as f:
            content = f.read()
            
        if '_handle_help_mode' in content:
            print("‚úÖ –ú–µ—Ç–æ–¥ _handle_help_mode —ñ—Å–Ω—É—î –≤ main.py")
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ _handle_help_mode –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è main.py: {e}")
    
    print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó:")
    print("1. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ intelligent_mode_detector.py –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä–µ–Ω—ñ Atlas")
    print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å Atlas –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –ø–ª–∞–≥—ñ–Ω–∞")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏:")
    print("   - –ü—Ä–æ—Å—Ç—É: 'read file main.py'")
    print("   - –°–∫–ª–∞–¥–Ω—É: '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É Atlas'")

if __name__ == "__main__":
    check_atlas_integration()
