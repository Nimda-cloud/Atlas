#!/usr/bin/env python3
"""
Atlas Configuration Diagnostics
–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Atlas –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
"""

import configparser
import json
import os
import sys
from pathlib import Path


def diagnose_configuration():
    """–ü–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Atlas"""
    print("üîç Atlas Configuration Diagnostics")
    print("=" * 50)

    issues = []
    warnings = []

    #1. Verification —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    config_files = check_config_files()
    if config_files["issues"]:
        issues.extend(config_files["issues"])
    if config_files["warnings"]:
        warnings.extend(config_files["warnings"])

    #2. Verification API –∫–ª—é—á—ñ–≤
    api_keys = check_api_keys()
    if api_keys["issues"]:
        issues.extend(api_keys["issues"])
    if api_keys["warnings"]:
        warnings.extend(api_keys["warnings"])

    #3. Verification Python —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    python_env = check_python_environment()
    if python_env["issues"]:
        issues.extend(python_env["issues"])
    if python_env["warnings"]:
        warnings.extend(python_env["warnings"])

    #4. Verification –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    dependencies = check_dependencies()
    if dependencies["issues"]:
        issues.extend(dependencies["issues"])
    if dependencies["warnings"]:
        warnings.extend(dependencies["warnings"])

    #5. –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    show_diagnostic_results(issues, warnings)

    return len(issues) == 0

def check_config_files():
    """Verification —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    print("\nüìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")

    issues = []
    warnings = []

    #config.ini
    if not os.path.exists("config.ini"):
        issues.append("config.ini –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("‚úÖ config.ini –∑–Ω–∞–π–¥–µ–Ω–æ")

        #Verification —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ config.ini
        config = configparser.ConfigParser()
        try:
            config.read("config.ini")

            required_sections = ["LLM", "Gemini"]
            for section in required_sections:
                if not config.has_section(section):
                    issues.append(f"–í—ñ–¥—Å—É—Ç–Ω—è —Å–µ–∫—Ü—ñ—è [{section}] –≤ config.ini")
                else:
                    print(f"‚úÖ –°–µ–∫—Ü—ñ—è [{section}] –∑–Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            issues.append(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è config.ini: {e}")

    #.env —Ñ–∞–π–ª
    if not os.path.exists(".env"):
        warnings.append(".env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("‚úÖ .env —Ñ–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ")

    #YAML configuration
    yaml_path = Path.home() / ".atlas" / "config.yaml"
    if not yaml_path.exists():
        warnings.append("YAML –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
    else:
        print("‚úÖ YAML –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞")

    return {"issues": issues, "warnings": warnings}

def check_api_keys():
    """Verification API –∫–ª—é—á—ñ–≤"""
    print("\nüîë –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤...")

    issues = []
    warnings = []

    #Verification –≤ config.ini
    if os.path.exists("config.ini"):
        config = configparser.ConfigParser()
        config.read("config.ini")

        #Gemini API –∫–ª—é—á
        if config.has_section("Gemini") and config.has_option("Gemini", "api_key"):
            gemini_key = config.get("Gemini", "api_key")
            if gemini_key and not gemini_key.startswith("YOUR_"):
                print("‚úÖ Gemini API –∫–ª—é—á –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            else:
                issues.append("Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ config.ini")
        else:
            issues.append("Gemini API –∫–ª—é—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ config.ini")

        #OpenAI API –∫–ª—é—á
        if config.has_section("OpenAI") and config.has_option("OpenAI", "api_key"):
            openai_key = config.get("OpenAI", "api_key")
            if openai_key and not openai_key.startswith("sk-your-"):
                print("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            else:
                warnings.append("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

    #Verification –≤ .env
    if os.path.exists(".env"):
        with open(".env") as f:
            env_content = f.read()

        if "GEMINI_API_KEY=" in env_content:
            for line in env_content.split("\n"):
                if line.startswith("GEMINI_API_KEY="):
                    key_value = line.split("=", 1)[1]
                    if key_value and not key_value.startswith("your-"):
                        print("‚úÖ Gemini API –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env")
                    else:
                        warnings.append("Gemini API –∫–ª—é—á –≤ .env –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
                    break

    return {"issues": issues, "warnings": warnings}

def check_python_environment():
    """Verification Python —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    print("\nüêç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...")

    issues = []
    warnings = []

    #–í–µ—Ä—Å—ñ—è Python
    python_version = sys.version_info
    print(f"‚úÖ Python –≤–µ—Ä—Å—ñ—è: {python_version.major}.{python_version.minor}.{python_version.micro}")

    if python_version < (3, 8):
        issues.append(f"Python –≤–µ—Ä—Å—ñ—è {python_version.major}.{python_version.minor} –∑–∞–Ω–∞–¥—Ç–æ —Å—Ç–∞—Ä–∞. –ü–æ—Ç—Ä—ñ–±–Ω–æ 3.8+")
    elif python_version >= (3, 13):
        print("‚úÖ Python –≤–µ—Ä—Å—ñ—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è macOS")

    #–í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    if hasattr(sys, "real_prefix") or (hasattr(sys, "base_prefix") and sys.base_prefix != sys.prefix):
        print("‚úÖ –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ")

        #Verification venv-macos
        if "venv-macos" in sys.prefix:
            print("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è venv-macos")
        else:
            warnings.append("–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ venv-macos")
    else:
        warnings.append("–í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")

    return {"issues": issues, "warnings": warnings}

def check_dependencies():
    """Verification –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")

    issues = []
    warnings = []

    critical_packages = [
        "google-generativeai",
        "openai",
        "customtkinter",
        "chromadb",
    ]

    optional_packages = [
        "pyautogui",
        "Pillow",
        "requests",
    ]

    #Verification –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤
    for package in critical_packages:
        try:
            __import__(package.replace("-", "_").replace("google_generativeai", "google.generativeai"))
            print(f"‚úÖ {package}")
        except ImportError:
            issues.append(f"–ö—Ä–∏—Ç–∏—á–Ω–∏–π –ø–∞–∫–µ—Ç {package} –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    #Verification –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤
    for package in optional_packages:
        try:
            __import__(package.lower())
            print(f"‚úÖ {package}")
        except ImportError:
            warnings.append(f"–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –ø–∞–∫–µ—Ç {package} –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    return {"issues": issues, "warnings": warnings}

def show_diagnostic_results(issues, warnings):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    print("=" * 50)

    if not issues and not warnings:
        print("üéâ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Atlas –≤ —ñ–¥–µ–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ!")
        print("üöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏: python3 main.py")
        return

    if issues:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ ({len(issues)}):")
        for i, issue in enumerate(issues, 1):
            print(f"   {i}. {issue}")

    if warnings:
        print(f"\n‚ö†Ô∏è  –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è ({len(warnings)}):")
        for i, warning in enumerate(warnings, 1):
            print(f"   {i}. {warning}")

    #–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—é
    print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")

    if issues:
        print("–î–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º:")
        print("   1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python3 setup_atlas_quick.py")
        print("   2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API –∫–ª—é—á—ñ –≤ .env —Ç–∞ config.ini")
        print("   3. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: pip install -r requirements-macos.txt")

    if warnings:
        print("–î–ª—è —É—Å—É–Ω–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å:")
        print("   1. –ê–∫—Ç–∏–≤—É–π—Ç–µ venv-macos: source venv-macos/bin/activate")
        print("   2. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ API –∫–ª—é—á—ñ")
        print("   3. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø–∞–∫–µ—Ç–∏")

def generate_diagnostic_report():
    """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("\nüìã –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É...")

    report = {
        "timestamp": str(Path(__file__).stat().st_mtime),
        "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        "platform": sys.platform,
        "files": {},
        "environment": {},
    }

    #–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–∞–π–ª–∏
    files_to_check = ["config.ini", ".env", "main.py", "requirements-macos.txt"]
    for file in files_to_check:
        report["files"][file] = {
            "exists": os.path.exists(file),
            "size": os.path.getsize(file) if os.path.exists(file) else 0,
        }

    #–ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    env_vars = ["GEMINI_API_KEY", "OPENAI_API_KEY", "PATH", "PYTHONPATH"]
    for var in env_vars:
        value = os.getenv(var, "")
        #–ü—Ä–∏—Ö–æ–≤—É—î–º–æ API –∫–ª—é—á—ñ
        if "API_KEY" in var and value:
            value = value[:10] + "..." if len(value) > 10 else "***"
        report["environment"][var] = value

    #–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç
    report_path = "atlas_diagnostic_report.json"
    with open(report_path, "w") as f:
        json.dump(report, f, indent=2)

    print(f"‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {report_path}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        #–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó Atlas
        atlas_dir = Path(__file__).parent
        os.chdir(atlas_dir)

        success = diagnose_configuration()

        #–ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç
        generate_diagnostic_report()

        sys.exit(0 if success else 1)

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
