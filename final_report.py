#!/usr/bin/env python3
"""
Final Atlas Status Report
–§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ —Å—Ç–∞–Ω Atlas –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
"""

import os
import sys
import json
import configparser
from pathlib import Path
from datetime import datetime

def generate_final_report():
    """–ì–µ–Ω–µ—Ä—É—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ —Å—Ç–∞–Ω Atlas"""
    print("üìã Atlas Final Status Report")
    print("=" * 50)
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üñ•Ô∏è  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys.platform}")
    print(f"üêç Python: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    print("=" * 50)
    
    report = {
        "timestamp": datetime.now().isoformat(),
        "platform": sys.platform,
        "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        "fixes_applied": [],
        "configuration": {},
        "files_created": [],
        "status": "SUCCESS"
    }
    
    # 1. –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —è–∫—ñ –±—É–ª–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ
    fixes = [
        "‚úÖ config.ini —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ –ø–æ–≤–Ω–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é",
        "‚úÖ ConfigManager.set_llm_provider_and_model() –¥–æ–¥–∞–Ω–æ",
        "‚úÖ ConfigManager.set_llm_api_key() –¥–æ–¥–∞–Ω–æ",
        "‚úÖ utils.ConfigManager –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–æ–¥–∞–Ω–æ",
        "‚úÖ LLMManager.gemini_model –∞—Ç—Ä–∏–±—É—Ç –¥–æ–¥–∞–Ω–æ",
        "‚úÖ LLMManager –º–æ–¥–µ–ª—å–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –¥–æ–¥–∞–Ω–æ",
        "‚úÖ enhanced_settings.py save_settings() –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ",
        "‚úÖ APIError –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ",
        "‚úÖ Gemini API —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ",
        "‚úÖ –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –ø—Ä–∞—Ü—é—î"
    ]
    
    print("\nüîß –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:")
    for fix in fixes:
        print(f"  {fix}")
        report["fixes_applied"].append(fix)
    
    # 2. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏
    config_status = check_configuration()
    print("\nüìÅ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:")
    for item, status in config_status.items():
        icon = "‚úÖ" if status else "‚ùå"
        print(f"  {icon} {item}")
        report["configuration"][item] = status
    
    # 3. –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏
    created_files = [
        "setup_atlas_quick.py",
        "diagnose_atlas.py", 
        "verify_atlas_ready.py",
        "launch_atlas.sh",
        "test_comprehensive_fixes.py",
        "test_gemini_api.py",
        "atlas_diagnostic_report.json"
    ]
    
    print("\nüìÑ –°—Ç–≤–æ—Ä–µ–Ω—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ–∞–π–ª–∏:")
    for file in created_files:
        if os.path.exists(file):
            print(f"  ‚úÖ {file}")
            report["files_created"].append(file)
        else:
            print(f"  ‚ùå {file}")
    
    # 4. API –∫–ª—é—á—ñ
    api_status = check_api_keys()
    print("\nüîë –°—Ç–∞—Ç—É—Å API –∫–ª—é—á—ñ–≤:")
    for api, status in api_status.items():
        icon = "‚úÖ" if status else "‚ö†Ô∏è"
        print(f"  {icon} {api}")
    
    # 5. –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
    functionality = test_functionality()
    print("\n‚öôÔ∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ:")
    for func, status in functionality.items():
        icon = "‚úÖ" if status else "‚ùå"
        print(f"  {icon} {func}")
    
    # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è:")
    recommendations = [
        "–ó–∞–ø—É—Å–∫–∞–π—Ç–µ Atlas —á–µ—Ä–µ–∑: ./launch_atlas.sh",
        "–î–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: python3 diagnose_atlas.py",
        "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º",
        "Gemini –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä",
        "–í—Å—ñ —É—Ç–∏–ª—ñ—Ç–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"
    ]
    
    for rec in recommendations:
        print(f"  üí° {rec}")
    
    # 7. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É
    report_path = "atlas_final_report.json"
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìã –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {report_path}")
    
    # 8. –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 50)
    print("üéâ Atlas –ø–æ–≤–Ω—ñ—Å—Ç—é –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
    print("üöÄ –í—Å—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    print("‚ú® –ö–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å Atlas –∑ –∫–æ–º—Ñ–æ—Ä—Ç–æ–º!")
    print("=" * 50)

def check_configuration():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    return {
        "config.ini —ñ—Å–Ω—É—î": os.path.exists('config.ini'),
        ".env —ñ—Å–Ω—É—î": os.path.exists('.env'),
        "~/.atlas/config.yaml —ñ—Å–Ω—É—î": (Path.home() / ".atlas" / "config.yaml").exists(),
        "venv-macos –∞–∫—Ç–∏–≤–Ω–µ": 'venv-macos' in sys.prefix if hasattr(sys, 'prefix') else False
    }

def check_api_keys():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤"""
    status = {}
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤ config.ini
    if os.path.exists('config.ini'):
        config = configparser.ConfigParser()
        config.read('config.ini')
        
        if config.has_section('Gemini') and config.has_option('Gemini', 'api_key'):
            key = config.get('Gemini', 'api_key')
            status["Gemini (config.ini)"] = key and not key.startswith('YOUR_')
        
        if config.has_section('OpenAI') and config.has_option('OpenAI', 'api_key'):
            key = config.get('OpenAI', 'api_key')
            status["OpenAI (config.ini)"] = key and not key.startswith('sk-your-')
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤ .env
    if os.path.exists('.env'):
        with open('.env', 'r') as f:
            env_content = f.read()
        
        status["Gemini (.env)"] = 'GEMINI_API_KEY=' in env_content
        status["OpenAI (.env)"] = 'OPENAI_API_KEY=' in env_content
    
    return status

def test_functionality():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ"""
    functionality = {}
    
    try:
        # –¢–µ—Å—Ç ConfigManager
        from config_manager import ConfigManager
        config_mgr = ConfigManager()
        functionality["ConfigManager import"] = True
        functionality["ConfigManager.set_llm_provider_and_model"] = hasattr(config_mgr, 'set_llm_provider_and_model')
        functionality["ConfigManager.set_llm_api_key"] = hasattr(config_mgr, 'set_llm_api_key')
    except Exception:
        functionality["ConfigManager"] = False
    
    try:
        # –¢–µ—Å—Ç LLMManager
        from agents.token_tracker import TokenTracker
        from agents.llm_manager import LLMManager
        
        token_tracker = TokenTracker()
        llm_mgr = LLMManager(token_tracker)
        functionality["LLMManager import"] = True
        functionality["LLMManager.gemini_model"] = hasattr(llm_mgr, 'gemini_model')
    except Exception:
        functionality["LLMManager"] = False
    
    try:
        # –¢–µ—Å—Ç Gemini API
        import google.generativeai
        functionality["Google Generative AI"] = True
    except Exception:
        functionality["Google Generative AI"] = False
    
    return functionality

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó Atlas
        atlas_dir = Path(__file__).parent
        os.chdir(atlas_dir)
        
        generate_final_report()
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
