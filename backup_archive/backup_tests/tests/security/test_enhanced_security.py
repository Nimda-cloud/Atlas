#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –±–µ–∑–ø–µ–∫–∏ Atlas

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π:
1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π timeout —Å–µ—Å—ñ—ó
2. Verification –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
3. Encryption –∫–µ—à—É —Ç–∞ –ª–æ–≥—ñ–≤
4. Extension —Å–µ—Å—ñ—ó
"""

import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), "..", ".."))

import time
from datetime import datetime, timedelta

from modules.agents.creator_authentication import (
    CreatorAuthentication,
    CreatorIdentityLevel,
)


def test_session_timeout():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ç–∞–π–º-–∞—É—Ç—É —Å–µ—Å—ñ—ó"""
    print("üïê –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –¢–ê–ô–ú-–ê–£–¢–£ –°–ï–°–Ü–á")
    print("=" * 50)

    auth = CreatorAuthentication()

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (1 —Ö–≤–∏–ª–∏–Ω–∞)
    auth.session_timeout_minutes = 1
    auth.inactivity_timeout_minutes = 0.5  # 30 —Å–µ–∫—É–Ω–¥

    # –°–∏–º—É–ª—é—î–º–æ —É—Å–ø—ñ—à–Ω—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    auth.current_identity_level = CreatorIdentityLevel.VERIFIED_CREATOR
    auth.is_creator_session_active = True
    auth.current_session_id = "timeout_test_session"
    auth.session_start_time = datetime.now()
    auth.last_activity_time = datetime.now()
    auth._initialize_session_encryption()

    print(f"‚úÖ –°–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∑ ID: {auth.current_session_id}")
    print(f"‚è∞ –¢–∞–π–º-–∞—É—Ç —Å–µ—Å—ñ—ó: {auth.session_timeout_minutes} —Ö–≤–∏–ª–∏–Ω")
    print(f"üí§ –¢–∞–π–º-–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {auth.inactivity_timeout_minutes} —Ö–≤–∏–ª–∏–Ω")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ status —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥
    print("\nüìä –°—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥:")
    time.sleep(5)
    status = auth.get_authentication_status()
    timeout_info = status.get("timeout_status", {})

    print(
        f"   ‚Ä¢ –°–µ—Å—ñ—è –∞–∫—Ç–∏–≤–Ω–∞: {'‚úÖ' if status['is_creator_session_active'] else '‚ùå'}"
    )
    print(f"   ‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {status['session_duration']:.1f} —Å–µ–∫")
    print(
        f"   ‚Ä¢ –ó–∞–ª–∏—à–∏–ª–æ—Å—å —á–∞—Å—É —Å–µ—Å—ñ—ó: {timeout_info.get('remaining_session_minutes', 0):.1f} —Ö–≤"
    )
    print(
        f"   ‚Ä¢ –ó–∞–ª–∏—à–∏–ª–æ—Å—å —á–∞—Å—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {timeout_info.get('remaining_inactivity_minutes', 0):.1f} —Ö–≤"
    )

    # –¢–µ—Å—Ç—É—î–º–æ timeout –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    print("\nüí§ –ß–µ–∫–∞—î–º–æ —Ç–∞–π–º-–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (35 —Å–µ–∫—É–Ω–¥)...")
    time.sleep(35)

    timeout_result = auth.check_session_timeout()
    print(f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {timeout_result}")

    final_status = auth.get_authentication_status()
    print(
        f"   ‚Ä¢ –°–µ—Å—ñ—è –∞–∫—Ç–∏–≤–Ω–∞: {'‚úÖ' if final_status['is_creator_session_active'] else '‚ùå'}"
    )


def test_session_extension():
    """–¢–µ—Å—Ç extension —Å–µ—Å—ñ—ó"""
    print("\n\nüîÑ –¢–ï–°–¢ –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –°–ï–°–Ü–á")
    print("=" * 50)

    auth = CreatorAuthentication()

    # –°–∏–º—É–ª—é—î–º–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    auth.current_identity_level = CreatorIdentityLevel.VERIFIED_CREATOR
    auth.is_creator_session_active = True
    auth.current_session_id = "extension_test_session"
    auth.session_start_time = datetime.now() - timedelta(minutes=25)  # 25 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É
    auth.last_activity_time = datetime.now()
    auth._initialize_session_encryption()

    print("‚úÖ –°–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ 25 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É")
    print(f"üî¢ –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–¥–æ–≤–∂–µ–Ω—å: {auth.max_session_extensions}")

    # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Å–µ—Å—ñ—é –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤
    for i in range(1, 5):  # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ 4 —Ä–∞–∑–∏
        print(f"\nüîÑ –°–ø—Ä–æ–±–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è #{i}:")
        result = auth.extend_creator_session()

        if result["success"]:
            print(f"   ‚úÖ {result['message']}")
            print(f"   üìä –ó–∞–ª–∏—à–∏–ª–æ—Å—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω—å: {result['remaining_extensions']}")
        else:
            print(f"   ‚ùå {result.get('message', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è')}")
            print(f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {result.get('reason', '–ù–µ–≤—ñ–¥–æ–º–∞')}")

        time.sleep(1)  # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞


def test_encrypted_cache_and_logs():
    """–¢–µ—Å—Ç encryption –∫–µ—à—É —Ç–∞ –ª–æ–≥—ñ–≤"""
    print("\n\nüîê –¢–ï–°–¢ –®–ò–§–†–£–í–ê–ù–ù–Ø –ö–ï–®–£ –¢–ê –õ–û–ì–Ü–í")
    print("=" * 50)

    auth = CreatorAuthentication()

    # –°–∏–º—É–ª—é—î–º–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    auth.current_identity_level = CreatorIdentityLevel.VERIFIED_CREATOR
    auth.is_creator_session_active = True
    auth.current_session_id = "encryption_test_session"
    auth.session_start_time = datetime.now()
    auth.last_activity_time = datetime.now()
    auth._initialize_session_encryption()

    print("‚úÖ –°–µ—Å—ñ—è –∑ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è–º —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")

    # –¢–µ—Å—Ç—É—î–º–æ cache
    print("\nüíæ –¢–µ—Å—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ –∫–µ—à—É:")

    test_data = {
        "user_preferences": {"language": "uk", "theme": "dark"},
        "conversation_context": "–û–±–≥–æ–≤–æ—Ä—é—î–º–æ —Å–∏—Å—Ç–µ–º—É –±–µ–∑–ø–µ–∫–∏ Atlas",
        "sensitive_info": "–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ —Ç–≤–æ—Ä—Ü—è",
    }

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ data –≤ –∫–µ—à—ñ
    for key, value in test_data.items():
        success = auth.store_encrypted_cache(key, value)
        print(f"   ‚Ä¢ {key}: {'‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ' if success else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")

    # –ß–∏—Ç–∞—î–º–æ data –∑ –∫–µ—à—É
    print("\nüìñ –ß–∏—Ç–∞–Ω–Ω—è –∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ –∫–µ—à—É:")
    for key in test_data:
        cached_value = auth.get_encrypted_cache(key)
        if cached_value:
            print(f"   ‚Ä¢ {key}: ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ")
            print(f"     –ó–Ω–∞—á–µ–Ω–Ω—è: {str(cached_value)[:50]}...")
        else:
            print(f"   ‚Ä¢ {key}: ‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    # –¢–µ—Å—Ç—É—î–º–æ logs
    print("\nüìù –¢–µ—Å—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤:")

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫—ñ–ª—å–∫–∞ –ø–æ–¥—ñ–π
    auth._log_encrypted_event(
        "USER_ACTION",
        {"action": "view_profile", "timestamp": datetime.now().isoformat()},
    )
    auth._log_encrypted_event(
        "SYSTEM_EVENT", {"event": "cache_update", "details": "Updated user preferences"}
    )
    auth._log_encrypted_event(
        "SECURITY_EVENT", {"level": "info", "message": "Session activity detected"}
    )

    print("   ‚Ä¢ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ 3 –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ—ó")

    # –ß–∏—Ç–∞—î–º–æ logs
    logs = auth.get_encrypted_logs(5)
    print(f"   ‚Ä¢ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(logs)} –ª–æ–≥—ñ–≤:")

    for i, log in enumerate(logs, 1):
        print(f"     {i}. {log['event_type']} - {log['timestamp'][:19]}")
        if "data" in log:
            print(f"        –î–∞–Ω—ñ: {str(log['data'])[:40]}...")

    # Status encryption
    status = auth.get_authentication_status()
    print("\nüìä –°—Ç–∞—Ç—É—Å —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:")
    print(
        f"   ‚Ä¢ –ö–µ—à —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if auth.cache_cipher else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}"
    )
    print(f"   ‚Ä¢ –õ–æ–≥ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if auth.log_cipher else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}")
    print(
        f"   ‚Ä¢ –†–æ–∑–º—ñ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ –∫–µ—à—É: {status.get('encrypted_cache_size', 0)} –∑–∞–ø–∏—Å—ñ–≤"
    )
    print(
        f"   ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤: {status.get('encrypted_logs_count', 0)} –∑–∞–ø–∏—Å—ñ–≤"
    )


def test_complete_workflow():
    """–¢–µ—Å—Ç –ø–æ–≤–Ω–æ–≥–æ —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É"""
    print("\n\nüîÑ –¢–ï–°–¢ –ü–û–í–ù–û–ì–û –†–û–ë–û–ß–û–ì–û –ü–†–û–¶–ï–°–£")
    print("=" * 50)

    auth = CreatorAuthentication()

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ settings
    auth.session_timeout_minutes = 30  # 30 —Ö–≤–∏–ª–∏–Ω
    auth.inactivity_timeout_minutes = 15  # 15 —Ö–≤–∏–ª–∏–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

    print("1Ô∏è‚É£ –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–≤–æ—Ä—Ü—è:")

    # –°–∏–º—É–ª—é—î–º–æ –ø–æ–≤–Ω—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    detected = auth.detect_creator_mention("–Ø —Ç–≤–æ—Ä–µ—Ü—å Atlas")
    print(f"   ‚Ä¢ –í–∏—è–≤–ª–µ–Ω–Ω—è: {detected.value}")

    if detected == CreatorIdentityLevel.POSSIBLE_CREATOR:
        auth_info = auth.initiate_creator_authentication(detected)
        print(f"   ‚Ä¢ –í–∏–∫–ª–∏–∫: {auth_info['challenge']}")

        success, message = auth.validate_challenge_response("6 —Ç–∞ 9")
        print(f"   ‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è: {'‚úÖ –£—Å–ø—ñ—à–Ω–∞' if success else '‚ùå –ù–µ–≤–¥–∞–ª–∞'}")

        if success:
            print("2Ô∏è‚É£ –†–æ–±–æ—Ç–∞ –∑ —Å–µ—Å—ñ—î—é:")

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ data –≤ –∫–µ—à—ñ
            auth.store_encrypted_cache(
                "conversation_history",
                [
                    {"role": "user", "content": "–ü—Ä–∏–≤—ñ—Ç, Atlas!"},
                    {
                        "role": "assistant",
                        "content": "–†–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏, –º—ñ–π –¥–æ—Ä–æ–≥–∏–π —Ç–≤–æ—Ä—á–µ!",
                    },
                ],
            )

            auth.store_encrypted_cache(
                "user_context",
                {
                    "mood": "friendly",
                    "topic": "security_testing",
                    "preferences": {"detailed_responses": True},
                },
            )

            print("   ‚Ä¢ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–º—É –∫–µ—à—ñ")

            # –°–∏–º—É–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
            print("3Ô∏è‚É£ –°–∏–º—É–ª—è—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:")
            for i in range(3):
                time.sleep(2)
                auth.update_activity_timestamp()
                auth._log_encrypted_event(
                    "USER_INTERACTION",
                    {
                        "interaction_type": "message",
                        "timestamp": datetime.now().isoformat(),
                    },
                )
                print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å {i + 1}/3 –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ status
            print("4Ô∏è‚É£ –°—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó:")
            status = auth.get_authentication_status()

            print(f"   ‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–µ—Å—ñ—ó: {status['session_duration']:.1f} —Å–µ–∫")
            print(
                f"   ‚Ä¢ –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {status.get('last_activity', '–ù–µ–≤—ñ–¥–æ–º–æ')[:19]}"
            )
            print(f"   ‚Ä¢ –†–æ–∑–º—ñ—Ä –∫–µ—à—É: {status.get('encrypted_cache_size', 0)} –∑–∞–ø–∏—Å—ñ–≤")
            print(
                f"   ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–≥—ñ–≤: {status.get('encrypted_logs_count', 0)} –∑–∞–ø–∏—Å—ñ–≤"
            )

            # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å–µ—Å—ñ—é
            print("5Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó:")
            auth.end_creator_session()

            final_status = auth.get_authentication_status()
            print(
                f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∞' if not final_status['is_creator_session_active'] else '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞'}"
            )
            print(
                f"   ‚Ä¢ –ö–µ—à –æ—á–∏—â–µ–Ω–æ: {'‚úÖ –¢–∞–∫' if final_status.get('encrypted_cache_size', 0) == 0 else '‚ùå –ù—ñ'}"
            )


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üîê –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–û–ö–†–ê–©–ï–ù–û–á –°–ò–°–¢–ï–ú–ò –ë–ï–ó–ü–ï–ö–ò ATLAS")
    print("=" * 70)

    try:
        test_session_timeout()
        test_session_extension()
        test_encrypted_cache_and_logs()
        test_complete_workflow()

        print("\n\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
        print("=" * 40)
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ç–∞–π–º-–∞—É—Ç —Å–µ—Å—ñ—ó –ø—Ä–∞—Ü—é—î")
        print("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø—Ä–∞—Ü—é—î")
        print("‚úÖ –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –ø—Ä–∞—Ü—é—î")
        print("‚úÖ –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∫–µ—à—É –ø—Ä–∞—Ü—é—î")
        print("‚úÖ –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ –ø—Ä–∞—Ü—é—î")
        print("‚úÖ –ü–æ–≤–Ω–∏–π —Ä–æ–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å –ø—Ä–∞—Ü—é—î")
        print("\nüõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–ø–µ–∫–∏ –∑–Ω–∞—á–Ω–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∞!")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
