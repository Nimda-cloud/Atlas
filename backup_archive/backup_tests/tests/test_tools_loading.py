#!/usr/bin/env python3
"""
–¢–µ—Å—Ç loading —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ Atlas
"""

import os
import sys

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)


def test_tools_loading():
    """–¢–µ—Å—Ç—É—î–º–æ loading —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ."""
    print("üîß –¢–ï–°–¢ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –Ü–ù–°–¢–†–£–ú–ï–ù–¢–Ü–í")
    print("=" * 50)

    try:
        from config_manager import ConfigManager
        from modules.agents.agent_manager import AgentManager
        from modules.agents.memory_manager import EnhancedMemoryManager
        from modules.agents.token_tracker import TokenTracker

        from utils.llm_manager import LLMManager

        print("üì¶ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤...")

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        config_manager = ConfigManager()
        token_tracker = TokenTracker()
        llm_manager = LLMManager(
            token_tracker=token_tracker, config_manager=config_manager
        )
        memory_manager = EnhancedMemoryManager(
            llm_manager=llm_manager, config_manager=config_manager
        )

        print("ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è AgentManager...")
        agent_manager = AgentManager(
            llm_manager=llm_manager, memory_manager=memory_manager
        )

        print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤...")
        tools = agent_manager.get_tool_descriptions()

        # –û—á—ñ–∫—É–≤–∞–Ω—ñ –±–∞–∑–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
        expected_tools = [
            "capture_screen",
            "get_clipboard_text",
            "set_clipboard_text",
            "click_at",
            "move_mouse",
            "type_text",
            "press_key",
            "ocr_image",
            "ocr_file",
            "find_template_in_image",
            "execute_command",
            "create_tool",
        ]

        print(f"üìã –ó–∞–≥–∞–ª–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {len(tools)}")
        print(f"üéØ –û—á—ñ–∫—É–≤–∞–Ω–∏—Ö –±–∞–∑–æ–≤–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {len(expected_tools)}")

        missing_tools = []
        found_tools = []

        for tool_name in expected_tools:
            if tool_name in tools:
                found_tools.append(tool_name)
                print(f"  ‚úÖ {tool_name}: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
            else:
                missing_tools.append(tool_name)
                print(f"  ‚ùå {tool_name}: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: {len(found_tools)}")
        print(f"  ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ—Ö: {len(missing_tools)}")

        # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
        print(f"\nüìÑ –í—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ ({len(tools)}):")
        for tool_name, description in tools.items():
            print(f"  ‚Ä¢ {tool_name}: {description[:60]}...")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ generated —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
        print("\nüîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤...")
        generated_dir = os.path.join(project_root, "tools", "generated")
        if os.path.exists(generated_dir):
            generated_files = [
                f
                for f in os.listdir(generated_dir)
                if f.endswith(".py") and not f.startswith("__")
            ]
            print(f"  üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤ —É tools/generated: {len(generated_files)}")
            for file in generated_files:
                print(f"    ‚Ä¢ {file}")
        else:
            print("  üìÅ –ü–∞–ø–∫–∞ tools/generated –Ω–µ —ñ—Å–Ω—É—î")

        # –§—ñ–Ω–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
        success_rate = len(found_tools) / len(expected_tools) * 100
        print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É:")
        print(f"  üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {success_rate:.1f}%")

        if success_rate >= 80:
            print("  üü¢ –í–Ü–î–ú–Ü–ù–ù–û: –ë—ñ–ª—å—à—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
        elif success_rate >= 60:
            print("  üü° –î–û–ë–†–ï: –î–µ—è–∫—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ")
        else:
            print("  üî¥ –ü–û–ì–ê–ù–û: –ë–∞–≥–∞—Ç–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")

        return success_rate >= 80

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = test_tools_loading()
    sys.exit(0 if success else 1)
