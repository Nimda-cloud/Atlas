#!/usr/bin/env python3
"""
–§—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç –≤—Å—ñ—î—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Atlas
"""

import sys
import tempfile
from pathlib import Path

from utils.config_manager import ConfigManager
from utils.llm_manager import LLMManager


def test_complete_system():
    """–¢–µ—Å—Ç—É—î–º–æ –ø–æ–≤–Ω—É —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó."""
    print("üéØ –§–Ü–ù–ê–õ–¨–ù–ò–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–ò ATLAS")
    print("=" * 50)

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π ConfigManager
    with tempfile.TemporaryDirectory() as tmpdir:
        config_path = Path(tmpdir) / "test_config.yaml"
        config_manager = ConfigManager(config_path)

        print("üîë –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤...")

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ API –∫–ª—é—á—ñ (–¥–æ–≤—à—ñ –∑–∞ 10 —Å–∏–º–≤–æ–ª—ñ–≤)
        api_keys = {
            "openai_api_key": "sk-1234567890abcdef1234567890abcdef12345678",
            "gemini_api_key": "AIzaSy1234567890abcdef1234567890abcdef12",
            "mistral_api_key": "mst_1234567890abcdef1234567890abcdef123456",
            "groq_api_key": "gsk_1234567890abcdef1234567890abcdef123456",
        }

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–µ—Ä–µ–∑ ConfigManager
        print("  üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ConfigManager...")
        for key, value in api_keys.items():
            config_manager.set_setting(key, value)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ç–∞ –º–æ–¥–µ–ª—å
        config_manager.set_setting("current_provider", "gemini")
        config_manager.set_setting("current_model", "gemini-1.5-flash")

        print("  üìñ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è...")
        all_good = True
        for key, expected_value in api_keys.items():
            actual_value = config_manager.get_setting(key)
            if actual_value == expected_value:
                print(f"    ‚úÖ {key}: –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print(
                    f"    ‚ùå {key}: –æ—á—ñ–∫—É–≤–∞–ª–∏ '{expected_value}', –æ—Ç—Ä–∏–º–∞–ª–∏ '{actual_value}'"
                )
                all_good = False

        # –¢–µ—Å—Ç—É—î–º–æ LLMManager –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏
        print("\nü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è LLMManager...")
        try:
            from modules.agents.token_tracker import TokenTracker

            token_tracker = TokenTracker()
            llm_manager = LLMManager(
                token_tracker=token_tracker, config_manager=config_manager
            )
            print("    ‚úÖ LLMManager —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

            # –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏
            available_providers = llm_manager.get_available_providers()
            print(f"    üìã –î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏: {available_providers}")

        except Exception as e:
            print(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ LLMManager: {e}")
            all_good = False

        # –¢–µ—Å—Ç—É—î–º–æ loading –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
        print("\nüîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")
        new_config_manager = ConfigManager(config_path)

        for key, expected_value in api_keys.items():
            actual_value = new_config_manager.get_setting(key)
            if actual_value == expected_value:
                print(f"    ‚úÖ {key}: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É")
            else:
                print(f"    ‚ùå {key}: –≤—Ç—Ä–∞—á–µ–Ω–æ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É")
                all_good = False

        # –§—ñ–Ω–∞–ª—å–Ω–∞ verification
        print("\n" + "=" * 50)
        if all_good:
            print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Atlas –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            print("‚ùå –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ù–ï –ü–†–û–ô–®–õ–ò")
            print("üîß –ü–æ—Ç—Ä—ñ–±–Ω–µ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")

        return all_good


if __name__ == "__main__":
    success = test_complete_system()
    sys.exit(0 if success else 1)
