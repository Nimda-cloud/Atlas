#!/usr/bin/env python3
"""
Atlas API Keys Manager
–£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è management API –∫–ª—é—á–∞–º–∏ –≤ Atlas
"""

import configparser
import getpass
import os
import sys
from pathlib import Path


def manage_api_keys():
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ management API –∫–ª—é—á–∞–º–∏"""
    print("üîë Atlas API Keys Manager")
    print("=" * 40)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    config = configparser.ConfigParser()
    config_path = "config.ini"

    if os.path.exists(config_path):
        config.read(config_path)
        print("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ config.ini")
    else:
        print("‚ùå config.ini –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False

    # –ü–æ–∫–∞–∑—É—î–º–æ current state
    show_current_keys(config)

    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –æ–ø—Ü—ñ—ó
    while True:
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:")
        print("1. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ OpenAI API –∫–ª—é—á")
        print("2. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Gemini API –∫–ª—é—á")
        print("3. –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω")
        print("4. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ API –∫–ª—é—á—ñ")
        print("5. –í–∏–π—Ç–∏")

        choice = input("\nüë§ –í–∞—à –≤–∏–±—ñ—Ä (1-5): ").strip()

        if choice == "1":
            set_openai_key(config, config_path)
        elif choice == "2":
            set_gemini_key(config, config_path)
        elif choice == "3":
            show_current_keys(config)
        elif choice == "4":
            test_api_keys(config)
        elif choice == "5":
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")


def show_current_keys(config):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ current state API –∫–ª—é—á—ñ–≤"""
    print("\nüîç –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω API –∫–ª—é—á—ñ–≤:")

    # OpenAI
    if config.has_section("OpenAI") and config.has_option("OpenAI", "api_key"):
        openai_key = config.get("OpenAI", "api_key")
        if (
            openai_key
            and not openai_key.startswith("YOUR_")
            and not openai_key.startswith("sk-your-")
        ):
            print(f"‚úÖ OpenAI: {openai_key[:20]}...")
        else:
            print("‚ö†Ô∏è  OpenAI: –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    else:
        print("‚ùå OpenAI: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

    # Gemini
    if config.has_section("Gemini") and config.has_option("Gemini", "api_key"):
        gemini_key = config.get("Gemini", "api_key")
        if gemini_key and not gemini_key.startswith("YOUR_"):
            print(f"‚úÖ Gemini: {gemini_key[:20]}...")
        else:
            print("‚ö†Ô∏è  Gemini: –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    else:
        print("‚ùå Gemini: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")


def set_openai_key(config, config_path):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ OpenAI API –∫–ª—é—á"""
    print("\nüîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenAI API –∫–ª—é—á–∞")
    print("üí° –û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–ª—é—á –Ω–∞: https://platform.openai.com/account/api-keys")

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    api_key = getpass.getpass("üîë –í–≤–µ–¥—ñ—Ç—å OpenAI API –∫–ª—é—á (sk-...): ").strip()

    if not api_key:
        print("‚ùå –ö–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω–æ")
        return

    if not api_key.startswith("sk-"):
        print("‚ö†Ô∏è  OpenAI –∫–ª—é—á—ñ –∑–∞–∑–≤–∏—á–∞–π –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ 'sk-'")
        confirm = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): ").strip().lower()
        if confirm != "y":
            return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª—é—á
    if not config.has_section("OpenAI"):
        config.add_section("OpenAI")

    config.set("OpenAI", "api_key", api_key)
    config.set("OpenAI", "model_name", "gpt-4-turbo")

    save_config(config, config_path)
    print("‚úÖ OpenAI API –∫–ª—é—á –∑–±–µ—Ä–µ–∂–µ–Ω–æ")


def set_gemini_key(config, config_path):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Gemini API –∫–ª—é—á"""
    print("\nüîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Gemini API –∫–ª—é—á–∞")
    print("üí° –û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–ª—é—á –Ω–∞: https://makersuite.google.com/app/apikey")

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    api_key = getpass.getpass("üîë –í–≤–µ–¥—ñ—Ç—å Gemini API –∫–ª—é—á (AIza...): ").strip()

    if not api_key:
        print("‚ùå –ö–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω–æ")
        return

    if not api_key.startswith("AIza"):
        print("‚ö†Ô∏è  Gemini –∫–ª—é—á—ñ –∑–∞–∑–≤–∏—á–∞–π –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ 'AIza'")
        confirm = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): ").strip().lower()
        if confirm != "y":
            return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª—é—á
    if not config.has_section("Gemini"):
        config.add_section("Gemini")

    config.set("Gemini", "api_key", api_key)
    config.set("Gemini", "model_name", "gemini-1.5-flash")

    save_config(config, config_path)
    print("‚úÖ Gemini API –∫–ª—é—á –∑–±–µ—Ä–µ–∂–µ–Ω–æ")


def save_config(config, config_path):
    """–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
    try:
        with open(config_path, "w") as configfile:
            config.write(configfile)
        print("üíæ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")


def test_api_keys(config):
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ API –∫–ª—é—á—ñ"""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤...")

    # –¢–µ—Å—Ç Gemini
    if config.has_section("Gemini") and config.has_option("Gemini", "api_key"):
        gemini_key = config.get("Gemini", "api_key")
        if gemini_key and not gemini_key.startswith("YOUR_"):
            print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Gemini API...")
            if test_gemini_api(gemini_key):
                print("‚úÖ Gemini API –ø—Ä–∞—Ü—é—î")
            else:
                print("‚ùå Gemini API –Ω–µ –ø—Ä–∞—Ü—é—î")
        else:
            print("‚ö†Ô∏è  Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

    # –¢–µ—Å—Ç OpenAI
    if config.has_section("OpenAI") and config.has_option("OpenAI", "api_key"):
        openai_key = config.get("OpenAI", "api_key")
        if (
            openai_key
            and not openai_key.startswith("YOUR_")
            and not openai_key.startswith("sk-your-")
        ):
            print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è OpenAI API...")
            if test_openai_api(openai_key):
                print("‚úÖ OpenAI API –ø—Ä–∞—Ü—é—î")
            else:
                print("‚ùå OpenAI API –Ω–µ –ø—Ä–∞—Ü—é—î")
        else:
            print("‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")


def test_gemini_api(api_key):
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ Gemini API"""
    try:
        import google.generativeai as genai

        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä—É—î–º–æ API
        genai.configure(api_key=api_key)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–µ–ª—å
        model = genai.GenerativeModel("gemini-1.5-flash")

        # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç
        response = model.generate_content("–°–∫–∞–∂–∏ –ø—Ä–∏–≤—ñ—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é")

        return bool(response.text)

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Gemini API: {e}")
        return False


def test_openai_api(api_key):
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ OpenAI API"""
    try:
        import openai

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
        client = openai.OpenAI(api_key=api_key)

        # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "–°–∫–∞–∂–∏ –ø—Ä–∏–≤—ñ—Ç"}],
            max_tokens=50,
        )

        return bool(response.choices[0].message.content)

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI API: {e}")
        return False


def quick_setup():
    """–®–≤–∏–¥–∫–µ settings –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏"""
    print("üöÄ –®–≤–∏–¥–∫–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤")
    print("=" * 40)

    print("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
    print("1. Gemini API - –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —ñ —à–≤–∏–¥–∫–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)")
    print("2. OpenAI API - –ø–ª–∞—Ç–Ω–∏–π, –∞–ª–µ –ø–æ—Ç—É–∂–Ω–∏–π")
    print("3. Gemini –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä")

    print("\nüí° –î–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ Atlas –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø—Ä–∏–Ω–∞–π–º–Ω—ñ Gemini API –∫–ª—é—á")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ current state
    config = configparser.ConfigParser()
    if os.path.exists("config.ini"):
        config.read("config.ini")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Gemini
        if config.has_section("Gemini") and config.has_option("Gemini", "api_key"):
            gemini_key = config.get("Gemini", "api_key")
            if gemini_key and not gemini_key.startswith("YOUR_"):
                print("‚úÖ Gemini API –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
                return True

        print("‚ö†Ô∏è  Gemini API –ø–æ—Ç—Ä–µ–±—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        setup_gemini = input("–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑? (Y/n): ").strip().lower()
        if setup_gemini != "n":
            set_gemini_key(config, "config.ini")
            return True

    return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó Atlas
        atlas_dir = Path(__file__).parent
        os.chdir(atlas_dir)

        if len(sys.argv) > 1 and sys.argv[1] == "--quick":
            quick_setup()
        else:
            manage_api_keys()

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ú–µ–Ω–µ–¥–∂–µ—Ä API –∫–ª—é—á—ñ–≤ –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
