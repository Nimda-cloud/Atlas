#!/usr/bin/env python3
"""
Atlas Quick Pattern Fixer - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∏–ø–æ–≤–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤ –∫–æ–¥—É
–í–∏–ø—Ä–∞–≤–ª—è—î SIM102, SIM117, B904 —Ç–∞ —ñ–Ω—à—ñ —Ç–∏–ø–æ–≤—ñ —à–∞–±–ª–æ–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –∫–æ–¥—É
"""

import os
import re
import subprocess
import sys
from pathlib import Path

# –ü–∞—Ç–µ—Ä–Ω–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
FIXES = {
    "SIM102": {  # –í–∫–ª–∞–¥–µ–Ω—ñ if statements
        "pattern": r"(\s+)if\s+(.*?):\s*\n\s+if\s+(.*?):\s*\n",
        "replacement": r"\1if \2 and \3:\n",
        "description": "–û–±'—î–¥–Ω–∞–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω–∏—Ö if-–æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤",
    },
    "SIM117": {  # –í–∫–ª–∞–¥–µ–Ω—ñ with statements
        "pattern": r"(\s+)with\s+(.*?):\s*\n\s+with\s+(.*?):\s*\n",
        "replacement": r"\1with \2, \3:\n",
        "description": "–û–±'—î–¥–Ω–∞–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω–∏—Ö with-–æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤",
    },
    "B904": {  # Raise from –≤ except
        "pattern": r"(\s+)except\s+(.*?)\s+as\s+(\w+):\s*\n((?:\s+.*\n)*?)(\s+)raise\s+(.*?)(?:\s*\n)",
        "replacement": r"\1except \2 as \3:\n\4\5raise \6 from \3\n",
        "description": "–î–æ–¥–∞–≤–∞–Ω–Ω—è from err –¥–æ raise –≤ except",
    },
    "SIM105": {  # contextlib.suppress
        "pattern": r"(\s+)try:\s*\n\s+(.*?)\s*\n\s+except\s+(.*?):\s*\n\s+pass\s*\n",
        "replacement": r"\1from contextlib import suppress\n\1with suppress(\3):\n\1    \2\n",
        "description": "–ó–∞–º—ñ–Ω–∞ try-except-pass –Ω–∞ contextlib.suppress",
    },
    "E722": {  # –ì–æ–ª–∏–π except
        "pattern": r"(\s+)except:\s*\n",
        "replacement": r"\1except Exception:\n",
        "description": "–ó–∞–º—ñ–Ω–∞ –≥–æ–ª–æ–≥–æ except –Ω–∞ except Exception",
    },
}


def find_python_files():
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ Python —Ñ–∞–π–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç—ñ."""
    files = []
    for root, dirs, filenames in os.walk(".", topdown=True):
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —è–∫—ñ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –Ω–∞ . –∞–±–æ backup_
        dirs[:] = [
            d
            for d in dirs
            if not (d.startswith(".") or d.startswith("backup_") or d == "venv")
        ]
        for filename in filenames:
            if filename.endswith(".py"):
                filepath = os.path.join(root, filename)
                files.append(filepath)
    return files


def fix_pattern_in_file(file_path, error_code):
    """–í–∏–ø—Ä–∞–≤–ª—è—î –ø–∞—Ç–µ—Ä–Ω —É —Ñ–∞–π–ª—ñ."""
    if error_code not in FIXES:
        return 0

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            content = file.read()

        pattern = FIXES[error_code]["pattern"]
        replacement = FIXES[error_code]["replacement"]
        description = FIXES[error_code]["description"]

        new_content, count = re.subn(pattern, replacement, content)
        if count > 0:
            with open(file_path, "w", encoding="utf-8") as file:
                file.write(new_content)
            print(
                f"[FIXED] {error_code} - {description} ({count} –≤–∏–ø–∞–¥–∫—ñ–≤) –≤ {file_path}"
            )
            return count
        return 0
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ {error_code} –≤ {file_path}: {e}")
        return 0


def fix_all_patterns_in_file(file_path):
    """–í–∏–ø—Ä–∞–≤–ª—è—î –≤—Å—ñ —à–∞–±–ª–æ–Ω–∏ –≤ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—ñ."""
    total_fixes = 0
    for error_code in FIXES:
        total_fixes += fix_pattern_in_file(file_path, error_code)
    return total_fixes


def fix_all_pattern_issues():
    """–í–∏–ø—Ä–∞–≤–ª—è—î –≤—Å—ñ —à–∞–±–ª–æ–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –∫–æ–¥—É –≤ –ø—Ä–æ–µ–∫—Ç—ñ."""
    print("–ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤ —É –ø—Ä–æ–µ–∫—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Ruff...")

    result = subprocess.run(
        [
            "ruff",
            "check",
            "--select=SIM102,SIM105,SIM117,B904,E722",
            "--format=text",
            ".",
        ],
        capture_output=True,
        text=True,
        encoding="utf-8",
    )

    # ruff check –ø–æ–≤–µ—Ä—Ç–∞—î 1, —è–∫—â–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–∏, —â–æ –¥–ª—è –Ω–∞—Å –Ω–µ —î –ø–æ–º–∏–ª–∫–æ—é.
    # –ù–∞—Å —Ö–≤–∏–ª—é—é—Ç—å –ª–∏—à–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–∫–æ–¥ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è > 1).
    if result.returncode > 1 and result.stderr:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É ruff: {result.stderr}")
        return

    output = result.stdout
    lines = output.strip().split("\n")

    if not lines or (len(lines) == 1 and not lines[0]):
        print("‚úÖ –ü–æ–º–∏–ª–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —ñ—Å–Ω—É—é—á—ñ —à–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤ –∑ –≤–∏–≤–æ–¥—É
    files_to_fix = sorted(
        {
            line.split(":")[0]
            for line in lines
            if ":" in line and os.path.exists(line.split(":")[0])
        }
    )

    if not files_to_fix:
        print("‚úÖ –ü–æ–º–∏–ª–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    print(
        f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(files_to_fix)} —Ñ–∞–π–ª—ñ–≤ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏ —à–∞–±–ª–æ–Ω—ñ–≤. –ü–æ—á–∏–Ω–∞—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è..."
    )
    print("=" * 50)

    total_fixed_count = 0
    fixed_files_count = 0

    for i, file_path in enumerate(files_to_fix, 1):
        print(f"[{i}/{len(files_to_fix)}] –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: {file_path}")
        fixes = fix_all_patterns_in_file(file_path)

        if fixes > 0:
            fixed_files_count += 1
            total_fixed_count += fixes

    print("\n" + "=" * 50)
    print(f"‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —à–∞–±–ª–æ–Ω—ñ–≤ –∫–æ–¥—É: {total_fixed_count}")
    print(f"‚úÖ –í {fixed_files_count} —Ñ–∞–π–ª–∞—Ö")


if __name__ == "__main__":
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    if not Path("pyproject.toml").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ—î–∫—Ç—É Atlas")
        sys.exit(1)

    print("üöÄ Atlas Quick Pattern Fixer")
    print("=" * 50)

    # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ —à–∞–±–ª–æ–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏
    fix_all_pattern_issues()
