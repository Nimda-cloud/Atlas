#!/usr/bin/env python3
"""
Translate Ukrainian comments and docstrings to English in Python files
Following Atlas development standards for cross-platform compatibility
"""

import os
import re
from pathlib import Path
from typing import Dict, List

#Translation dictionary for common Ukrainian programming terms
TRANSLATIONS = {
    #System terms
    "–°–∏—Å—Ç–µ–º–∞": "System",
    "—Å–∏—Å—Ç–µ–º–∞": "system", 
    "–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è": "Initialization",
    "—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è": "initialization",
    "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è": "Configuration", 
    "–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è": "configuration",
    "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è": "Settings",
    "–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è": "settings",
    "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è": "Management",
    "—É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è": "management",
    "–û–±—Ä–æ–±–∫–∞": "Processing",
    "–æ–±—Ä–æ–±–∫–∞": "processing",
    
    #Authentication terms
    "–ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è": "Authentication",
    "–∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è": "authentication",
    "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è": "Identification", 
    "—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è": "identification",
    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è": "Authorization",
    "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è": "authorization",
    "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞": "Verification",
    "–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞": "verification",
    "–í–∏–∫–ª–∏–∫": "Challenge",
    "–≤–∏–∫–ª–∏–∫": "challenge",
    "–í—ñ–¥–ø–æ–≤—ñ–¥—å": "Response", 
    "–≤—ñ–¥–ø–æ–≤—ñ–¥—å": "response",
    "–°–µ—Å—ñ—è": "Session",
    "—Å–µ—Å—ñ—è": "session",
    
    #Security terms
    "–ë–µ–∑–ø–µ–∫–∞": "Security",
    "–±–µ–∑–ø–µ–∫–∞": "security",
    "–®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è": "Encryption",
    "—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è": "encryption",
    "–†–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è": "Decryption",
    "—Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è": "decryption",
    "–ó–∞—Ö–∏—Å—Ç": "Protection",
    "–∑–∞—Ö–∏—Å—Ç": "protection",
    "–î–æ—Å—Ç—É–ø": "Access",
    "–¥–æ—Å—Ç—É–ø": "access",
    "–ü—Ä–∏–≤—ñ–ª–µ—ó": "Privileges",
    "–ø—Ä–∏–≤—ñ–ª–µ—ó": "privileges",
    
    #Data terms
    "–î–∞–Ω—ñ": "Data",
    "–¥–∞–Ω—ñ": "data",
    "–ö–µ—à": "Cache",
    "–∫–µ—à": "cache",
    "–õ–æ–≥–∏": "Logs",
    "–ª–æ–≥–∏": "logs",
    "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è": "Storage",
    "–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è": "storage",
    "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è": "Loading",
    "–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è": "loading",
    
    #Action terms
    "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è": "Creation",
    "—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è": "creation",
    "–í–∏–¥–∞–ª–µ–Ω–Ω—è": "Deletion",
    "–≤–∏–¥–∞–ª–µ–Ω–Ω—è": "deletion",
    "–û–Ω–æ–≤–ª–µ–Ω–Ω—è": "Update",
    "–æ–Ω–æ–≤–ª–µ–Ω–Ω—è": "update",
    "–û—Ç—Ä–∏–º–∞–Ω–Ω—è": "Getting",
    "–æ—Ç—Ä–∏–º–∞–Ω–Ω—è": "getting",
    "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è": "Generation",
    "–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è": "generation",
    
    #Time terms
    "–¢–∞–π–º-–∞—É—Ç": "Timeout",
    "—Ç–∞–π–º-–∞—É—Ç": "timeout",
    "–ß–∞—Å": "Time",
    "—á–∞—Å": "time",
    "–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å": "Inactivity",
    "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å": "inactivity",
    "–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è": "Extension",
    "–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è": "extension",
    
    #Status terms
    "–°—Ç–∞—Ç—É—Å": "Status", 
    "—Å—Ç–∞—Ç—É—Å": "status",
    "–°—Ç–∞–Ω": "State",
    "—Å—Ç–∞–Ω": "state",
    "–ê–∫—Ç–∏–≤–Ω–∏–π": "Active",
    "–∞–∫—Ç–∏–≤–Ω–∏–π": "active",
    "–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π": "Inactive",
    "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π": "inactive",
    
    #Common phrases
    "–¥–ª—è —Ç–≤–æ—Ä—Ü—è": "for creator",
    "—Ç–≤–æ—Ä—Ü—è": "creator",
    "–¢–≤–æ—Ä–µ—Ü—å": "Creator",
    "—Ç–≤–æ—Ä–µ—Ü—å": "creator",
    "–ê—Ç–ª–∞—Å": "Atlas",
    "–ø–æ—Ç–æ—á–Ω–∏–π": "current",
    "–ü–æ—Ç–æ—á–Ω–∏–π": "Current",
    "–Ω–æ–≤–∏–π": "new",
    "–ù–æ–≤–∏–π": "New",
    "–∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π": "old",
    "–ó–∞—Å—Ç–∞—Ä—ñ–ª–∏–π": "Old",
}

def translate_text(text: str) -> str:
    """Translate Ukrainian text to English using the translation dictionary"""
    result = text
    for uk, en in TRANSLATIONS.items():
        #Use word boundaries to avoid partial matches
        pattern = r'\b' + re.escape(uk) + r'\b'
        result = re.sub(pattern, en, result)
    return result

def translate_comments_in_file(file_path: Path) -> bool:
    """Translate Ukrainian comments and docstrings in a Python file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        #Translate single-line comments
        def translate_comment(match):
            comment = match.group(1)
            translated = translate_text(comment)
            return f"#{translated}"
        
        content = re.sub(r'#\s*(.+)', translate_comment, content)
        
        #Translate docstrings
        def translate_docstring(match):
            quotes = match.group(1)  #""" or '''
            docstring = match.group(2)
            translated = translate_text(docstring)
            return f'{quotes}{translated}{quotes}'
        
        content = re.sub(r'(""")(.*?)(""")', translate_docstring, content, flags=re.DOTALL)
        content = re.sub(r"(''')(.*?)(''')", translate_docstring, content, flags=re.DOTALL)
        
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ Translated comments in: {file_path}")
            return True
        else:
            print(f"üìã No translation needed: {file_path}")
            return False
    
    except Exception as e:
        print(f"‚ùå Error processing {file_path}: {e}")
        return False

def main():
    """Translate Ukrainian comments in Atlas Python files"""
    print("üåç ATLAS CODE TRANSLATION TO ENGLISH")
    print("=" * 50)
    print("Following Atlas development standards for cross-platform compatibility")
    print()
    
    root_dir = Path(".")
    
    #Directories to process
    dirs_to_process = [
        "agents",
        "tools", 
        "ui",
        "monitoring",
        "plugins",
        "scripts",
        "tests",
        "dev-tools",
        "utils"
    ]
    
    translated_files = 0
    total_files = 0
    
    #Process root level files
    for py_file in root_dir.glob("*.py"):
        if py_file.name not in ["translate_comments_to_english.py"]:
            total_files += 1
            if translate_comments_in_file(py_file):
                translated_files += 1
    
    #Process directories
    for dir_name in dirs_to_process:
        dir_path = root_dir / dir_name
        if dir_path.exists():
            for py_file in dir_path.rglob("*.py"):
                total_files += 1
                if translate_comments_in_file(py_file):
                    translated_files += 1
    
    print(f"\nüìä SUMMARY:")
    print(f"   Total files processed: {total_files}")
    print(f"   Files translated: {translated_files}")
    print(f"   Files unchanged: {total_files - translated_files}")
    print("\n‚úÖ Translation completed!")
    print("üéØ Atlas code now follows English-only development standards")

if __name__ == "__main__":
    main()
