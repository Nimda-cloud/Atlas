#!/usr/bin/env python3
"""
Atlas Final Verification Script
–§—ñ–Ω–∞–ª—å–Ω–∞ verification –≤—Å—ñ—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å —Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ Atlas
"""

import configparser
import os
import sys
from pathlib import Path


def final_verification():
    """–§—ñ–Ω–∞–ª—å–Ω–∞ verification –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ Atlas"""
    print("üéØ Atlas Final Verification")
    print("=" * 40)

    checks = [
        ("üìÅ –§–∞–π–ª–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", check_config_files),
        ("üîë API –∫–ª—é—á—ñ", check_api_keys),
        ("üêç Python —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ", check_python_env),
        ("üì¶ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ", check_dependencies),
        ("‚öôÔ∏è  ConfigManager –º–µ—Ç–æ–¥–∏", check_config_manager_methods),
        ("ü§ñ LLMManager –∞—Ç—Ä–∏–±—É—Ç–∏", check_llm_manager_attributes),
        ("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", check_settings_save),
    ]

    passed = 0
    total = len(checks)

    for name, check_func in checks:
        print(f"\n{name}:")
        try:
            if check_func():
                print("‚úÖ –ü–†–û–ô–î–ï–ù–û")
                passed += 1
            else:
                print("‚ùå –ü–†–û–í–ê–õ–ï–ù–û")
        except Exception as e:
            print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")

    print("\n" + "=" * 40)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ Atlas –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        print("\nüöÄ –°–ø–æ—Å–æ–±–∏ –∑–∞–ø—É—Å–∫—É:")
        print("   1. ./launch_atlas.sh         (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)")
        print("   2. python3 main.py          (–±–∞–∑–æ–≤–∏–π)")
        print("   3. ./launch_macos.sh        (—è–∫—â–æ —î)")

        print("\nüîß –î–æ–¥–∞—Ç–∫–æ–≤—ñ —É—Ç–∏–ª—ñ—Ç–∏:")
        print("   ‚Ä¢ python3 diagnose_atlas.py    - –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        print("   ‚Ä¢ python3 setup_atlas_quick.py - —à–≤–∏–¥–∫–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")

        return True
    print("‚ö†Ô∏è  –Ñ –ø—Ä–æ–±–ª–µ–º–∏, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏")
    print("\nüîß –î–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:")
    print("   python3 setup_atlas_quick.py")

    return False

def check_config_files():
    """Verification —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    required_files = ["config.ini", ".env"]
    for file in required_files:
        if not os.path.exists(file):
            print(f"  ‚ùå {file} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
            return False
        print(f"  ‚úÖ {file}")

    #Verification YAML
    yaml_path = Path.home() / ".atlas" / "config.yaml"
    if yaml_path.exists():
        print("  ‚úÖ ~/.atlas/config.yaml")
    else:
        print("  ‚ö†Ô∏è  ~/.atlas/config.yaml –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

    return True

def check_api_keys():
    """Verification API –∫–ª—é—á—ñ–≤"""
    if not os.path.exists("config.ini"):
        return False

    config = configparser.ConfigParser()
    config.read("config.ini")

    #Gemini –∫–ª—é—á
    if config.has_section("Gemini") and config.has_option("Gemini", "api_key"):
        key = config.get("Gemini", "api_key")
        if key and not key.startswith("YOUR_"):
            print("  ‚úÖ Gemini API –∫–ª—é—á")
        else:
            print("  ‚ùå Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return False
    else:
        print("  ‚ùå Gemini API –∫–ª—é—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
        return False

    return True

def check_python_env():
    """Verification Python —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    #–í–µ—Ä—Å—ñ—è Python
    if sys.version_info < (3, 8):
        print(f"  ‚ùå Python {sys.version_info.major}.{sys.version_info.minor} –∑–∞–Ω–∞–¥—Ç–æ —Å—Ç–∞—Ä–∏–π")
        return False
    print(f"  ‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")

    #–í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    if hasattr(sys, "real_prefix") or (hasattr(sys, "base_prefix") and sys.base_prefix != sys.prefix):
        print("  ‚úÖ –í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –∞–∫—Ç–∏–≤–Ω–µ")
        if "venv-macos" in sys.prefix:
            print("  ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è venv-macos")
    else:
        print("  ‚ö†Ô∏è  –í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–µ")

    return True

def check_dependencies():
    """Verification –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    critical_deps = [
        ("google.generativeai", "google-generativeai"),
        ("openai", "openai"),
        ("customtkinter", "customtkinter"),
        ("chromadb", "chromadb"),
    ]

    for module, package in critical_deps:
        try:
            __import__(module)
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package} –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False

    return True

def check_config_manager_methods():
    """Verification –º–µ—Ç–æ–¥—ñ–≤ ConfigManager"""
    try:
        #–û—Å–Ω–æ–≤–Ω–∏–π ConfigManager
        from config_manager import ConfigManager
        config_mgr = ConfigManager()

        required_methods = ["set_llm_provider_and_model", "set_llm_api_key"]
        for method in required_methods:
            if hasattr(config_mgr, method):
                print(f"  ‚úÖ ConfigManager.{method}")
            else:
                print(f"  ‚ùå ConfigManager.{method} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
                return False

        #Utils ConfigManager
        from utils.config_manager import ConfigManager as UtilsConfigManager
        utils_config_mgr = UtilsConfigManager()

        for method in required_methods:
            if hasattr(utils_config_mgr, method):
                print(f"  ‚úÖ utils.ConfigManager.{method}")
            else:
                print(f"  ‚ùå utils.ConfigManager.{method} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
                return False

        return True

    except Exception as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        return False

def check_llm_manager_attributes():
    """Verification –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ LLMManager"""
    try:
        #Mock TokenTracker
        class MockTokenTracker:
            def add_usage(self, usage):
                pass

        from utils.llm_manager import LLMManager

        token_tracker = MockTokenTracker()
        llm_mgr = LLMManager(token_tracker)

        required_attrs = ["gemini_model", "openai_model"]
        for attr in required_attrs:
            if hasattr(llm_mgr, attr):
                print(f"  ‚úÖ LLMManager.{attr}")
            else:
                print(f"  ‚ùå LLMManager.{attr} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
                return False

        return True

    except Exception as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó LLMManager: {e}")
        return False

def check_settings_save():
    """Verification storage –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    try:
        #–¢–µ—Å—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π ConfigManager
        from config_manager import ConfigManager
        config_mgr = ConfigManager()

        #–¢–µ—Å—Ç–æ–≤–µ storage
        test_result = config_mgr.set_llm_provider_and_model("gemini", "gemini-1.5-flash")
        if test_result:
            print("  ‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞/–º–æ–¥–µ–ª—ñ –ø—Ä–∞—Ü—é—î")
        else:
            print("  ‚ùå –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞/–º–æ–¥–µ–ª—ñ –Ω–µ –ø—Ä–∞—Ü—é—î")
            return False

        #–¢–µ—Å—Ç—É—î–º–æ storage API –∫–ª—é—á–∞
        test_key_result = config_mgr.set_llm_api_key("test_provider", "test_key")
        if test_key_result:
            print("  ‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è API –∫–ª—é—á–∞ –ø—Ä–∞—Ü—é—î")
        else:
            print("  ‚ùå –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è API –∫–ª—é—á–∞ –Ω–µ –ø—Ä–∞—Ü—é—î")
            return False

        return True

    except Exception as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        #–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó Atlas
        atlas_dir = Path(__file__).parent
        os.chdir(atlas_dir)

        success = final_verification()

        if success:
            print("\nüéä –í—ñ—Ç–∞—î–º–æ! Atlas –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")

        sys.exit(0 if success else 1)

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
