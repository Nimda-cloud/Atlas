#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π –º–∞—Å–æ–≤–∏–π —Ñ—ñ–∫—Å–µ—Ä –¥–ª—è Atlas –ø—Ä–æ—î–∫—Ç—É
–í–∏–ø—Ä–∞–≤–ª—è—î –Ω–∞–π—á–∞—Å—Ç—ñ—à—ñ –ø–æ–º–∏–ª–∫–∏ Ruff –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
"""

import subprocess
import sys
from pathlib import Path


def run_ruff_fixes():
    """–ó–∞–ø—É—Å–∫–∞—î Ruff –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏"""

    # –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    fixable_rules = [
        "F401",  # –ù–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
        "F811",  # –ü–æ–≤—Ç–æ—Ä–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        "E402",  # –Ü–º–ø–æ—Ä—Ç–∏ –Ω–µ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ–∞–π–ª—É
        "SIM108",  # Ternary operator
        "I001",  # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
    ]

    print("üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å Ruff...")

    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ ruff –∑ --fix –¥–ª—è –ø—Ä–∞–≤–∏–ª, —è–∫—ñ –º–æ–∂–Ω–∞ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        cmd = [
            "ruff",
            "check",
            f"--select={','.join(fixable_rules)}",
            "--fix",
            "--unsafe-fixes",
            ".",
        ]
        result = subprocess.run(cmd, capture_output=True, text=True)

        if result.returncode == 0:
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        else:
            print(f"‚ö†Ô∏è  –î–µ—è–∫—ñ –ø–æ–º–∏–ª–∫–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—å: {result.stdout}")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        print("üé® –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É...")
        subprocess.run(["ruff", "format", "."], check=True)

        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
        print("\nüìä –ê–Ω–∞–ª—ñ–∑ –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫:")
        result = subprocess.run(
            ["ruff", "check", "--statistics"], capture_output=True, text=True
        )
        if result.stdout:
            print(result.stdout)

    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ruff: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå Ruff –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install ruff")
        return False

    return True


def fix_common_import_issues():
    """–î–æ–¥–∞—î —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ —É —Ñ–∞–π–ª–∏, –¥–µ –≤–æ–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ"""

    common_fixes = {
        "from typing import Any": ["Any"],
        "from typing import Dict": ["Dict"],
        "from typing import List": ["List"],
        "from typing import Optional": ["Optional"],
        "import json": ["json"],
        "import time": ["time"],
        "from datetime import timedelta": ["timedelta"],
    }

    print("üì¶ –î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Å—Ç–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤...")

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ Python —Ñ–∞–π–ª–∏
    py_files = list(Path(".").rglob("*.py"))

    for py_file in py_files:
        if "backup_" in str(py_file) or ".git" in str(py_file):
            continue

        try:
            with open(py_file, "r", encoding="utf-8") as f:
                content = f.read()

            modified = False
            for import_line, needed_names in common_fixes.items():
                for name in needed_names:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –Ω–µ–¥–µ—Ñ—ñ–Ω–æ–≤–∞–Ω–∞ –∑–º—ñ–Ω–Ω–∞ —ñ –Ω–µ–º–∞—î —ñ–º–ø–æ—Ä—Ç—É
                    if (
                        f"name `{name}`"
                        in subprocess.run(
                            ["ruff", "check", "--select=F821", str(py_file)],
                            capture_output=True,
                            text=True,
                        ).stdout
                        and import_line not in content
                    ):
                        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É
                        lines = content.split("\n")
                        insert_idx = 0

                        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —ñ–º–ø–æ—Ä—Ç
                        for i, line in enumerate(lines):
                            if line.strip().startswith(("import ", "from ")):
                                insert_idx = i + 1

                        # –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç
                        lines.insert(insert_idx, import_line)
                        content = "\n".join(lines)
                        modified = True
                        print(f"  ‚úì –î–æ–¥–∞–Ω–æ {import_line} —É {py_file}")

            if modified:
                with open(py_file, "w", encoding="utf-8") as f:
                    f.write(content)

        except Exception as e:
            print(f"  ‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {py_file}: {e}")


def main():
    print("üöÄ Atlas Auto-Fixer - –®–≤–∏–¥–∫–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫")
    print("=" * 50)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    if not Path("pyproject.toml").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ—î–∫—Ç—É Atlas")
        sys.exit(1)

    # 1. –°–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è Ruff
    if not run_ruff_fixes():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Ruff")
        sys.exit(1)

    # 2. –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
    fix_common_import_issues()

    # 3. –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø—É—Å–∫ Ruff –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
    print("\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø—É—Å–∫ Ruff –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤...")
    run_ruff_fixes()

    print("\nüéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üí° –î–ª—è –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ AI –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ Continue —É VS Code")


if __name__ == "__main__":
    main()
