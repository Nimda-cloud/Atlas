#!/usr/bin/env python3
"""
Atlas Quick Setup Utility
–®–≤–∏–¥–∫–µ settings Atlas –¥–ª—è macOS –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
"""

import configparser
import os
import shutil
import sys
from pathlib import Path


def setup_atlas_config():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ settings Atlas –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    print("üçé Atlas macOS Quick Setup")
    print("=" * 40)

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ config.ini
    if not os.path.exists("config.ini"):
        print("üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è config.ini...")

        # –ö–æ–ø—ñ—é—î–º–æ –∑ –ø—Ä–∏–∫–ª–∞–¥—É –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ new
        if os.path.exists("dev-tools/setup/config.ini.example"):
            shutil.copy("dev-tools/setup/config.ini.example", "config.ini")
            print("‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –∑ –ø—Ä–∏–∫–ª–∞–¥—É")
        else:
            create_default_config()
            print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
    else:
        print("‚úÖ config.ini –≤–∂–µ —ñ—Å–Ω—É—î")

    # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API –∫–ª—é—á—ñ –≤ .env
    setup_api_keys()

    # 3. –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ config.ini –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
    update_config_ini()

    # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ YAML –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    setup_yaml_config()

    # 5. –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π status
    show_setup_status()


def create_default_config():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ config.ini –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
    config = configparser.ConfigParser()

    config["OpenAI"] = {
        "api_key": "sk-your-openai-api-key-here",
        "model_name": "gpt-4-turbo",
    }

    config["Gemini"] = {
        "api_key": "YOUR_GEMINI_API_KEY_HERE",
        "model_name": "gemini-1.5-flash",
    }

    config["LLM"] = {
        "provider": "gemini",
        "model": "gemini-1.5-flash",
    }

    config["UI"] = {
        "theme": "dark",
        "language": "en",
    }

    config["Security"] = {
        "enable_sandbox": "true",
        "max_file_size": "10485760",
    }

    config["Performance"] = {
        "max_workers": "4",
        "timeout": "30",
    }

    with open("config.ini", "w") as configfile:
        config.write(configfile)


def setup_api_keys():
    """Settings API –∫–ª—é—á—ñ–≤ –∑ .env —Ñ–∞–π–ª—É"""
    print("\nüîë –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤...")

    if os.path.exists(".env"):
        with open(".env") as f:
            env_content = f.read()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á—ñ–≤
        keys_found = {}
        for provider in ["OPENAI", "GEMINI", "GROQ", "MISTRAL"]:
            key_pattern = f"{provider}_API_KEY="
            if key_pattern in env_content:
                # –í–∏—Ç—è–≥—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—é—á–∞
                for line in env_content.split("\n"):
                    if line.startswith(key_pattern):
                        key_value = line.split("=", 1)[1]
                        if (
                            key_value
                            and not key_value.startswith("your-")
                            and not key_value.startswith("sk-your-")
                        ):
                            keys_found[provider] = key_value
                            print(f"‚úÖ {provider} API –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ")
                        else:
                            print(f"‚ö†Ô∏è  {provider} API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

        return keys_found
    print("‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    return {}


def update_config_ini():
    """–û–Ω–æ–≤–∏—Ç–∏ config.ini –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏"""
    print("\nüìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è config.ini...")

    config = configparser.ConfigParser()
    config.read("config.ini")

    # –ß–∏—Ç–∞—î–º–æ –∫–ª—é—á—ñ –∑ .env
    env_keys = {}
    if os.path.exists(".env"):
        with open(".env") as f:
            for line in f:
                if "=" in line and not line.startswith("#"):
                    key, value = line.strip().split("=", 1)
                    env_keys[key] = value

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    updates_made = False

    # Gemini API –∫–ª—é—á
    if env_keys.get("GEMINI_API_KEY"):
        if not config.has_section("Gemini"):
            config.add_section("Gemini")
        config.set("Gemini", "api_key", env_keys["GEMINI_API_KEY"])
        updates_made = True
        print("‚úÖ Gemini API –∫–ª—é—á –æ–Ω–æ–≤–ª–µ–Ω–æ")

    # OpenAI API –∫–ª—é—á
    if env_keys.get("OPENAI_API_KEY"):
        if not config.has_section("OpenAI"):
            config.add_section("OpenAI")
        config.set("OpenAI", "api_key", env_keys["OPENAI_API_KEY"])
        updates_made = True
        print("‚úÖ OpenAI API –∫–ª—é—á –æ–Ω–æ–≤–ª–µ–Ω–æ")

    # LLM settings
    if not config.has_section("LLM"):
        config.add_section("LLM")
        config.set("LLM", "provider", "gemini")
        config.set("LLM", "model", "gemini-1.5-flash")
        updates_made = True
        print("‚úÖ LLM –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
    if updates_made:
        with open("config.ini", "w") as configfile:
            config.write(configfile)
        print("‚úÖ config.ini –æ–Ω–æ–≤–ª–µ–Ω–æ")


def setup_yaml_config():
    """Settings YAML –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    print("\nüîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ YAML –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")

    yaml_path = Path.home() / ".atlas" / "config.yaml"
    yaml_path.parent.mkdir(exist_ok=True)

    if not yaml_path.exists():
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É YAML –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        yaml_content = """current_provider: gemini
current_model: gemini-1.5-flash
agents:
  Browser Agent:
    provider: gemini
    model: gemini-1.5-flash
    fallback_chain: []
  Screen Agent:
    provider: gemini
    model: gemini-1.5-flash
    fallback_chain: []
  Text Agent:
    provider: gemini
    model: gemini-1.5-flash
    fallback_chain: []
  System Interaction Agent:
    provider: gemini
    model: gemini-1.5-flash
    fallback_chain: []
security:
  destructive_op_threshold: 80
  api_usage_threshold: 50
  file_access_threshold: 70
  rules:
    - "#Example Rule: Deny all shell commands that contain 'rm -rf'"
    - "DENY,TERMINAL,.*rm -rf.*"
"""

        with open(yaml_path, "w") as f:
            f.write(yaml_content)
        print("‚úÖ YAML –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞")
    else:
        print("‚úÖ YAML –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î")


def show_setup_status():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π status settings"""
    print("\n" + "=" * 40)
    print("üìä –°—Ç–∞—Ç—É—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Atlas:")
    print("=" * 40)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–∏
    files_status = {
        "config.ini": os.path.exists("config.ini"),
        ".env": os.path.exists(".env"),
        "~/.atlas/config.yaml": (Path.home() / ".atlas" / "config.yaml").exists(),
    }

    for file, exists in files_status.items():
        status = "‚úÖ" if exists else "‚ùå"
        print(f"{status} {file}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API –∫–ª—é—á—ñ
    print("\nüîë API –∫–ª—é—á—ñ:")
    if os.path.exists("config.ini"):
        config = configparser.ConfigParser()
        config.read("config.ini")

        for section in ["Gemini", "OpenAI"]:
            if config.has_section(section) and config.has_option(section, "api_key"):
                key = config.get(section, "api_key")
                if (
                    key
                    and not key.startswith("YOUR_")
                    and not key.startswith("sk-your-")
                ):
                    print(f"‚úÖ {section} API –∫–ª—é—á –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
                else:
                    print(f"‚ö†Ô∏è  {section} API –∫–ª—é—á –ø–æ—Ç—Ä–µ–±—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")

    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫—É Atlas:")
    print("   python3 main.py")

    print("\nüîß –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print("   ./quick_test_macos.sh")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó Atlas
        atlas_dir = Path(__file__).parent
        os.chdir(atlas_dir)

        setup_atlas_config()

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
