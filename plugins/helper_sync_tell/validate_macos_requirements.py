#!/usr/bin/env python3
"""
–í–∞–ª—ñ–¥–∞—Ü—ñ—è requirements-macos.txt –¥–ª—è Atlas —Ç–∞ Helper Sync Tell –ø–ª–∞–≥—ñ–Ω–∞.
"""

import sys
from pathlib import Path


def validate_requirements():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤—Å—ñ –ø–∞–∫–µ—Ç–∏ –≤ requirements-macos.txt —ñ—Å–Ω—É—é—Ç—å."""

    print("üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è requirements-macos.txt")
    print("=" * 50)

    requirements_file = Path("/workspaces/Atlas/requirements-macos.txt")

    if not requirements_file.exists():
        print("‚ùå –§–∞–π–ª requirements-macos.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False

    #–ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª —Ç–∞ –≤–∏—Ç—è–≥—É—î–º–æ –ø–∞–∫–µ—Ç–∏
    packages = []
    with open(requirements_file, encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith("#"):
                #–í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É –ø–∞–∫–µ—Ç–∞ (–¥–æ –ø–µ—Ä—à–æ–≥–æ = –∞–±–æ >=)
                if "==" in line:
                    package = line.split("==")[0].strip()
                elif ">=" in line:
                    package = line.split(">=")[0].strip()
                elif line and not any(op in line for op in ["<", ">", "!", "~"]):
                    package = line.strip()
                else:
                    continue

                if package:
                    packages.append(package)

    print(f"üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ {len(packages)} –ø–∞–∫–µ—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
    print()

    #–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–∞–∫–µ—Ç–∏ –¥–ª—è Helper Sync Tell
    critical_packages = [
        "requests",
        "PyYAML",
        "openai",
        "google-generativeai",
        "pyobjc-core",
        "pyobjc-framework-Cocoa",
        "pyobjc-framework-Quartz",
    ]

    print("üéØ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤ –¥–ª—è Helper Sync Tell:")
    all_critical_present = True

    for critical in critical_packages:
        found = any(pkg.startswith(critical) for pkg in packages)
        if found:
            print(f"   ‚úÖ {critical}")
        else:
            print(f"   ‚ùå {critical} - –í–Ü–î–°–£–¢–ù–Ü–ô!")
            all_critical_present = False

    print()

    #Verification –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤
    problematic_packages = [
        "pyobjc-framework-Foundation",  #–¶–µ–π –ø–∞–∫–µ—Ç –Ω–µ —ñ—Å–Ω—É—î
    ]

    print("‚ö†Ô∏è  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤:")
    problems_found = False

    for problematic in problematic_packages:
        found = any(pkg.startswith(problematic) for pkg in packages)
        if found:
            print(f"   ‚ùå {problematic} - –ü–†–û–ë–õ–ï–ú–ù–ò–ô –ü–ê–ö–ï–¢ (–Ω–µ —ñ—Å–Ω—É—î)")
            problems_found = True
        else:
            print(f"   ‚úÖ {problematic} - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–¥–æ–±—Ä–µ)")

    print()

    #–ü—ñ–¥—Å—É–º–æ–∫
    print("üìä –ü–Ü–î–°–£–ú–û–ö –í–ê–õ–Ü–î–ê–¶–Ü–á:")
    if all_critical_present and not problems_found:
        print("‚úÖ –í—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–∞–∫–µ—Ç–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print("‚úÖ requirements-macos.txt –ì–û–¢–û–í–ò–ô –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
        return True
    if not all_critical_present:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–∞–∫–µ—Ç–∏")
    if problems_found:
        print("‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –ø–∞–∫–µ—Ç–∏")
    print("‚ö†Ô∏è  requirements-macos.txt –ü–û–¢–†–ï–ë–£–Ñ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø")
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó."""
    print("üçé –í–∞–ª—ñ–¥–∞—Ç–æ—Ä –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π macOS –¥–ª—è Atlas")
    print("–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è Helper Sync Tell –ø–ª–∞–≥—ñ–Ω–∞")
    print()

    success = validate_requirements()

    if success:
        print("\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢: requirements-macos.txt –≤–∞–ª—ñ–¥–Ω–∏–π!")
        print("Helper Sync Tell –ø–ª–∞–≥—ñ–Ω –º–æ–∂–µ –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ macOS.")
        return 0
    print("\n‚ö†Ô∏è  –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤ requirements-macos.txt")
    return 1

if __name__ == "__main__":
    sys.exit(main())
