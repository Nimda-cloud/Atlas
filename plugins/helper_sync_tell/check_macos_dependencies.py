#!/usr/bin/env python3
"""
Verification –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π macOS –¥–ª—è –ø–ª–∞–≥—ñ–Ω–∞ Helper Sync Tell.
"""

import sys
from pathlib import Path

#–°–ø–∏—Å–æ–∫ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—î –ø–ª–∞–≥—ñ–Ω Helper Sync Tell
PLUGIN_DEPENDENCIES = {
    #–û—Å–Ω–æ–≤–Ω—ñ Python –ø–∞–∫–µ—Ç–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞)
    "logging": {"type": "stdlib", "required": True},
    "time": {"type": "stdlib", "required": True},
    "uuid": {"type": "stdlib", "required": True},
    "sys": {"type": "stdlib", "required": True},
    "json": {"type": "stdlib", "required": True},
    "platform": {"type": "stdlib", "required": True},
    "os": {"type": "stdlib", "required": True},
    "typing": {"type": "stdlib", "required": True},
    
    #–ó–æ–≤–Ω—ñ—à–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
    "requests": {"type": "external", "required": False, "purpose": "HTTP requests for LLM APIs"},
    "PyYAML": {"type": "external", "required": False, "purpose": "Configuration file parsing"},
    "openai": {"type": "external", "required": False, "purpose": "OpenAI API integration"},
    "google-generativeai": {"type": "external", "required": False, "purpose": "Gemini API integration"},
    
    #macOS —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    "pyobjc-core": {"type": "macos", "required": False, "purpose": "macOS native integration"},
    "pyobjc-framework-Cocoa": {"type": "macos", "required": False, "purpose": "macOS GUI integration (includes Foundation)"},
    "pyobjc-framework-Quartz": {"type": "macos", "required": False, "purpose": "macOS display and graphics"},
    
    #Atlas –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ (–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ)
    "agents": {"type": "atlas", "required": False, "purpose": "Atlas agent system integration"},
    "config_manager": {"type": "atlas", "required": False, "purpose": "Atlas configuration management"},
    "utils": {"type": "atlas", "required": False, "purpose": "Atlas utility functions"},
}

def check_macos_requirements():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î requirements-macos.txt –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π."""
    
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π macOS –¥–ª—è Helper Sync Tell Plugin")
    print("=" * 60)
    
    #–ß–∏—Ç–∞—î–º–æ requirements-macos.txt
    requirements_file = Path("/workspaces/Atlas/requirements-macos.txt")
    if not requirements_file.exists():
        print("‚ùå –§–∞–π–ª requirements-macos.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    with open(requirements_file, 'r', encoding='utf-8') as f:
        requirements_content = f.read().lower()
    
    #–†–æ–∑–¥—ñ–ª—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    stdlib_deps = {k: v for k, v in PLUGIN_DEPENDENCIES.items() if v["type"] == "stdlib"}
    external_deps = {k: v for k, v in PLUGIN_DEPENDENCIES.items() if v["type"] == "external"}
    macos_deps = {k: v for k, v in PLUGIN_DEPENDENCIES.items() if v["type"] == "macos"}
    atlas_deps = {k: v for k, v in PLUGIN_DEPENDENCIES.items() if v["type"] == "atlas"}
    
    print("üìö –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ Python:")
    for dep, info in stdlib_deps.items():
        print(f"   ‚úÖ {dep} - –≤–±—É–¥–æ–≤–∞–Ω–∏–π –≤ Python")
    
    print("\nüì¶ –ó–æ–≤–Ω—ñ—à–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
    missing_external = []
    for dep, info in external_deps.items():
        if dep.lower() in requirements_content:
            print(f"   ‚úÖ {dep} - –ø—Ä–∏—Å—É—Ç–Ω—ñ–π –≤ requirements-macos.txt")
        else:
            status = "‚ùå –í–Ü–î–°–£–¢–ù–Ü–ô" if info["required"] else "‚ö†Ô∏è  –í–Ü–î–°–£–¢–ù–Ü–ô (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π)"
            print(f"   {status} {dep} - {info['purpose']}")
            if info["required"]:
                missing_external.append(dep)
    
    print("\nüçé macOS —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
    missing_macos = []
    for dep, info in macos_deps.items():
        if dep.lower() in requirements_content:
            print(f"   ‚úÖ {dep} - –ø—Ä–∏—Å—É—Ç–Ω—ñ–π –≤ requirements-macos.txt")
        else:
            status = "‚ùå –í–Ü–î–°–£–¢–ù–Ü–ô" if info["required"] else "‚ö†Ô∏è  –í–Ü–î–°–£–¢–ù–Ü–ô (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π)"
            print(f"   {status} {dep} - {info['purpose']}")
            if info["required"]:
                missing_macos.append(dep)
    
    print("\nüèõÔ∏è  Atlas –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
    for dep, info in atlas_deps.items():
        print(f"   ‚ÑπÔ∏è  {dep} - –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å Atlas ({info['purpose']})")
    
    #–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ macOS –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º–∏
    additional_macos_deps = {
        "pyobjc-framework-ApplicationServices": "–ü–æ–∫—Ä–∞—â–µ–Ω—ñ API –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç—ñ–≤",
        "pyobjc-framework-CoreServices": "–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ —Å–∏—Å—Ç–µ–º–Ω–∏–º–∏ —Å–µ—Ä–≤—ñ—Å–∞–º–∏ macOS",
    }
    
    print("\nüîß –î–æ–¥–∞—Ç–∫–æ–≤—ñ macOS –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
    for dep, purpose in additional_macos_deps.items():
        if dep.lower() in requirements_content:
            print(f"   ‚úÖ {dep} - –ø—Ä–∏—Å—É—Ç–Ω—ñ–π ({purpose})")
        else:
            print(f"   ‚ö†Ô∏è  {dep} - –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ({purpose})")
    
    #–í–∏—Å–Ω–æ–≤–∫–∏
    print("\n" + "=" * 60)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –ü–ï–†–ï–í–Ü–†–ö–ò:")
    
    if not missing_external and not missing_macos:
        print("‚úÖ –í—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ –≤ requirements-macos.txt")
        print("‚úÖ –ü–ª–∞–≥—ñ–Ω Helper Sync Tell –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∏–π –¥–ª—è macOS")
        return True
    else:
        if missing_external:
            print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: {', '.join(missing_external)}")
        if missing_macos:
            print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ macOS –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: {', '.join(missing_macos)}")
        return False

def generate_recommendations():
    """–ì–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è requirements-macos.txt."""
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
    print("1. –í—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤–∂–µ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
    print("2. –ü–ª–∞–≥—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î graceful degradation –¥–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤")
    print("3. macOS —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ç–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ñ")
    print("4. LLM API –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ (openai, google-generativeai) –≤–∂–µ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
    print("5. PyObjC —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ—ó macOS —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –≤–∂–µ –≤–∫–ª—é—á–µ–Ω—ñ")
    
    print("\nüéØ –°–¢–ê–¢–£–°: requirements-macos.txt –ì–û–¢–û–í–ò–ô –¥–ª—è Helper Sync Tell")

if __name__ == "__main__":
    success = check_macos_requirements()
    generate_recommendations()
    
    if success:
        print("\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≥–æ—Ç–æ–≤—ñ!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è  –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")
        sys.exit(1)
